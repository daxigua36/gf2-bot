// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package gfbot.decoder.characters

@SerialVersionUID(0L)
final case class GunData(
    id: _root_.scala.Int = 0,
    name: _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData] = _root_.scala.None,
    firstName: _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData] = _root_.scala.None,
    secondName: _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData] = _root_.scala.None,
    enName: _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData] = _root_.scala.None,
    introduce: _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData] = _root_.scala.None,
    dialogue: _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData] = _root_.scala.None,
    extra: _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData] = _root_.scala.None,
    code: _root_.scala.Predef.String = "",
    `type`: _root_.scala.Int = 0,
    characterId: _root_.scala.Int = 0,
    getAudio: _root_.scala.Int = 0,
    duty: _root_.scala.Int = 0,
    secondDuty: _root_.scala.Int = 0,
    rank: _root_.scala.Int = 0,
    roleTemplateId: _root_.scala.Int = 0,
    coreItemId: _root_.scala.Int = 0,
    upgradeSpeech: _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData] = _root_.scala.None,
    skillNormalAttack: _root_.scala.Int = 0,
    skillActiveExtra: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
    skillTalentExtra: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
    aiList: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
    element: _root_.scala.Int = 0,
    weaponType: _root_.scala.Int = 0,
    weaponPrivate: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
    weaponPrivateShow: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
    weaponDefault: _root_.scala.Int = 0,
    moveCode: _root_.scala.Int = 0,
    soldGet1: _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Int] = _root_.scala.collection.immutable.Map.empty,
    systemSwitch: _root_.scala.Int = 0,
    useFakeAttack: _root_.scala.Boolean = false,
    camp: _root_.scala.Int = 0,
    defaultGrade: _root_.scala.Int = 0,
    unlockCost: _root_.scala.Int = 0,
    grade: _root_.scala.Int = 0,
    gunClass: _root_.scala.Int = 0,
    barrackCameraSetting: _root_.scala.Predef.String = "",
    avatar: _root_.scala.Int = 0,
    costumeId: _root_.scala.Int = 0,
    costumeReplace: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
    propertyId: _root_.scala.Int = 0,
    barrackEffectId: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
    weight: _root_.scala.Int = 0,
    barrackAudioId: _root_.scala.Int = 0,
    shieldType: _root_.scala.Int = 0,
    maxGrade: _root_.scala.Int = 0,
    shieldEffectId: _root_.scala.Int = 0,
    baseSupply: _root_.scala.Int = 0,
    supplyTypeBanList: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
    extraSkill: _root_.scala.Int = 0,
    shieldBrokenEffectId: _root_.scala.Int = 0,
    attackType: _root_.scala.Int = 0,
    gachaGetTimeline: _root_.scala.Predef.String = "",
    beSuppressedConfig: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
    shape: _root_.scala.Int = 0,
    shapeParam: _root_.scala.Predef.String = "",
    shapeIcon: _root_.scala.Predef.String = "",
    shapeTerrain: _root_.scala.Int = 0,
    idleType: _root_.scala.Int = 0,
    displacement: _root_.scala.Int = 0,
    isHide: _root_.scala.Boolean = false,
    weakTag: _root_.scala.Predef.String = "",
    suppressGroup: _root_.scala.Predef.String = "",
    unlockHint: _root_.scala.Int = 0,
    unlockDorm: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
    guardRadius: _root_.scala.Int = 0,
    guardRadiusShow: _root_.scala.Int = 0,
    gachaGetAudio: _root_.scala.Int = 0,
    gachaGetVoice: _root_.scala.Int = 0,
    weakWeaponTag: _root_.scala.Int = 0,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[GunData] {
    private[this] def skillActiveExtraSerializedSize = {
      if (__skillActiveExtraSerializedSizeField == 0) __skillActiveExtraSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        skillActiveExtra.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__i))
        __s
      }
      __skillActiveExtraSerializedSizeField
    }
    @transient private[this] var __skillActiveExtraSerializedSizeField: _root_.scala.Int = 0
    private[this] def skillTalentExtraSerializedSize = {
      if (__skillTalentExtraSerializedSizeField == 0) __skillTalentExtraSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        skillTalentExtra.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__i))
        __s
      }
      __skillTalentExtraSerializedSizeField
    }
    @transient private[this] var __skillTalentExtraSerializedSizeField: _root_.scala.Int = 0
    private[this] def aiListSerializedSize = {
      if (__aiListSerializedSizeField == 0) __aiListSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        aiList.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(__i))
        __s
      }
      __aiListSerializedSizeField
    }
    @transient private[this] var __aiListSerializedSizeField: _root_.scala.Int = 0
    private[this] def weaponPrivateSerializedSize = {
      if (__weaponPrivateSerializedSizeField == 0) __weaponPrivateSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        weaponPrivate.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__i))
        __s
      }
      __weaponPrivateSerializedSizeField
    }
    @transient private[this] var __weaponPrivateSerializedSizeField: _root_.scala.Int = 0
    private[this] def weaponPrivateShowSerializedSize = {
      if (__weaponPrivateShowSerializedSizeField == 0) __weaponPrivateShowSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        weaponPrivateShow.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__i))
        __s
      }
      __weaponPrivateShowSerializedSizeField
    }
    @transient private[this] var __weaponPrivateShowSerializedSizeField: _root_.scala.Int = 0
    private[this] def costumeReplaceSerializedSize = {
      if (__costumeReplaceSerializedSizeField == 0) __costumeReplaceSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        costumeReplace.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__i))
        __s
      }
      __costumeReplaceSerializedSizeField
    }
    @transient private[this] var __costumeReplaceSerializedSizeField: _root_.scala.Int = 0
    private[this] def barrackEffectIdSerializedSize = {
      if (__barrackEffectIdSerializedSizeField == 0) __barrackEffectIdSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        barrackEffectId.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__i))
        __s
      }
      __barrackEffectIdSerializedSizeField
    }
    @transient private[this] var __barrackEffectIdSerializedSizeField: _root_.scala.Int = 0
    private[this] def supplyTypeBanListSerializedSize = {
      if (__supplyTypeBanListSerializedSizeField == 0) __supplyTypeBanListSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        supplyTypeBanList.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__i))
        __s
      }
      __supplyTypeBanListSerializedSizeField
    }
    @transient private[this] var __supplyTypeBanListSerializedSizeField: _root_.scala.Int = 0
    private[this] def beSuppressedConfigSerializedSize = {
      if (__beSuppressedConfigSerializedSizeField == 0) __beSuppressedConfigSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        beSuppressedConfig.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(__i))
        __s
      }
      __beSuppressedConfigSerializedSizeField
    }
    @transient private[this] var __beSuppressedConfigSerializedSizeField: _root_.scala.Int = 0
    private[this] def unlockDormSerializedSize = {
      if (__unlockDormSerializedSizeField == 0) __unlockDormSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        unlockDorm.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__i))
        __s
      }
      __unlockDormSerializedSizeField
    }
    @transient private[this] var __unlockDormSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = id
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, __value)
        }
      };
      if (name.isDefined) {
        val __value = name.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (firstName.isDefined) {
        val __value = firstName.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (secondName.isDefined) {
        val __value = secondName.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (enName.isDefined) {
        val __value = enName.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (introduce.isDefined) {
        val __value = introduce.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (dialogue.isDefined) {
        val __value = dialogue.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (extra.isDefined) {
        val __value = extra.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = code
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, __value)
        }
      };
      
      {
        val __value = `type`
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(10, __value)
        }
      };
      
      {
        val __value = characterId
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(11, __value)
        }
      };
      
      {
        val __value = getAudio
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(12, __value)
        }
      };
      
      {
        val __value = duty
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(13, __value)
        }
      };
      
      {
        val __value = secondDuty
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(14, __value)
        }
      };
      
      {
        val __value = rank
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(15, __value)
        }
      };
      
      {
        val __value = roleTemplateId
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(16, __value)
        }
      };
      
      {
        val __value = coreItemId
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(17, __value)
        }
      };
      if (upgradeSpeech.isDefined) {
        val __value = upgradeSpeech.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = skillNormalAttack
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(19, __value)
        }
      };
      if (skillActiveExtra.nonEmpty) {
        val __localsize = skillActiveExtraSerializedSize
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      if (skillTalentExtra.nonEmpty) {
        val __localsize = skillTalentExtraSerializedSize
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      if (aiList.nonEmpty) {
        val __localsize = aiListSerializedSize
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      
      {
        val __value = element
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(23, __value)
        }
      };
      
      {
        val __value = weaponType
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(24, __value)
        }
      };
      if (weaponPrivate.nonEmpty) {
        val __localsize = weaponPrivateSerializedSize
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      if (weaponPrivateShow.nonEmpty) {
        val __localsize = weaponPrivateShowSerializedSize
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      
      {
        val __value = weaponDefault
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(27, __value)
        }
      };
      
      {
        val __value = moveCode
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(28, __value)
        }
      };
      soldGet1.foreach { __item =>
        val __value = GunData._typemapper_soldGet1.toBase(__item)
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = systemSwitch
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(30, __value)
        }
      };
      
      {
        val __value = useFakeAttack
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(31, __value)
        }
      };
      
      {
        val __value = camp
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(32, __value)
        }
      };
      
      {
        val __value = defaultGrade
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(33, __value)
        }
      };
      
      {
        val __value = unlockCost
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(34, __value)
        }
      };
      
      {
        val __value = grade
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(35, __value)
        }
      };
      
      {
        val __value = gunClass
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(36, __value)
        }
      };
      
      {
        val __value = barrackCameraSetting
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(37, __value)
        }
      };
      
      {
        val __value = avatar
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(38, __value)
        }
      };
      
      {
        val __value = costumeId
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(39, __value)
        }
      };
      if (costumeReplace.nonEmpty) {
        val __localsize = costumeReplaceSerializedSize
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      
      {
        val __value = propertyId
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(41, __value)
        }
      };
      if (barrackEffectId.nonEmpty) {
        val __localsize = barrackEffectIdSerializedSize
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      
      {
        val __value = weight
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(43, __value)
        }
      };
      
      {
        val __value = barrackAudioId
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(44, __value)
        }
      };
      
      {
        val __value = shieldType
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(45, __value)
        }
      };
      
      {
        val __value = maxGrade
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(46, __value)
        }
      };
      
      {
        val __value = shieldEffectId
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(47, __value)
        }
      };
      
      {
        val __value = baseSupply
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(48, __value)
        }
      };
      if (supplyTypeBanList.nonEmpty) {
        val __localsize = supplyTypeBanListSerializedSize
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      
      {
        val __value = extraSkill
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(50, __value)
        }
      };
      
      {
        val __value = shieldBrokenEffectId
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(51, __value)
        }
      };
      
      {
        val __value = attackType
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(52, __value)
        }
      };
      
      {
        val __value = gachaGetTimeline
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(53, __value)
        }
      };
      if (beSuppressedConfig.nonEmpty) {
        val __localsize = beSuppressedConfigSerializedSize
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      
      {
        val __value = shape
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(55, __value)
        }
      };
      
      {
        val __value = shapeParam
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(56, __value)
        }
      };
      
      {
        val __value = shapeIcon
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(57, __value)
        }
      };
      
      {
        val __value = shapeTerrain
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(58, __value)
        }
      };
      
      {
        val __value = idleType
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(59, __value)
        }
      };
      
      {
        val __value = displacement
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(60, __value)
        }
      };
      
      {
        val __value = isHide
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(61, __value)
        }
      };
      
      {
        val __value = weakTag
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(62, __value)
        }
      };
      
      {
        val __value = suppressGroup
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(63, __value)
        }
      };
      
      {
        val __value = unlockHint
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(64, __value)
        }
      };
      if (unlockDorm.nonEmpty) {
        val __localsize = unlockDormSerializedSize
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      
      {
        val __value = guardRadius
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(66, __value)
        }
      };
      
      {
        val __value = guardRadiusShow
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(67, __value)
        }
      };
      
      {
        val __value = gachaGetAudio
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(68, __value)
        }
      };
      
      {
        val __value = gachaGetVoice
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(69, __value)
        }
      };
      
      {
        val __value = weakWeaponTag
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(70, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = id
        if (__v != 0) {
          _output__.writeUInt32(1, __v)
        }
      };
      name.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      firstName.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      secondName.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      enName.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      introduce.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      dialogue.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      extra.foreach { __v =>
        val __m = __v
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = code
        if (!__v.isEmpty) {
          _output__.writeString(9, __v)
        }
      };
      {
        val __v = `type`
        if (__v != 0) {
          _output__.writeInt32(10, __v)
        }
      };
      {
        val __v = characterId
        if (__v != 0) {
          _output__.writeUInt32(11, __v)
        }
      };
      {
        val __v = getAudio
        if (__v != 0) {
          _output__.writeUInt32(12, __v)
        }
      };
      {
        val __v = duty
        if (__v != 0) {
          _output__.writeInt32(13, __v)
        }
      };
      {
        val __v = secondDuty
        if (__v != 0) {
          _output__.writeUInt32(14, __v)
        }
      };
      {
        val __v = rank
        if (__v != 0) {
          _output__.writeInt32(15, __v)
        }
      };
      {
        val __v = roleTemplateId
        if (__v != 0) {
          _output__.writeUInt32(16, __v)
        }
      };
      {
        val __v = coreItemId
        if (__v != 0) {
          _output__.writeUInt32(17, __v)
        }
      };
      upgradeSpeech.foreach { __v =>
        val __m = __v
        _output__.writeTag(18, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = skillNormalAttack
        if (__v != 0) {
          _output__.writeUInt32(19, __v)
        }
      };
      if (skillActiveExtra.nonEmpty) {
        _output__.writeTag(20, 2)
        _output__.writeUInt32NoTag(skillActiveExtraSerializedSize)
        skillActiveExtra.foreach(_output__.writeUInt32NoTag)
      };
      if (skillTalentExtra.nonEmpty) {
        _output__.writeTag(21, 2)
        _output__.writeUInt32NoTag(skillTalentExtraSerializedSize)
        skillTalentExtra.foreach(_output__.writeUInt32NoTag)
      };
      if (aiList.nonEmpty) {
        _output__.writeTag(22, 2)
        _output__.writeUInt32NoTag(aiListSerializedSize)
        aiList.foreach(_output__.writeInt32NoTag)
      };
      {
        val __v = element
        if (__v != 0) {
          _output__.writeUInt32(23, __v)
        }
      };
      {
        val __v = weaponType
        if (__v != 0) {
          _output__.writeUInt32(24, __v)
        }
      };
      if (weaponPrivate.nonEmpty) {
        _output__.writeTag(25, 2)
        _output__.writeUInt32NoTag(weaponPrivateSerializedSize)
        weaponPrivate.foreach(_output__.writeUInt32NoTag)
      };
      if (weaponPrivateShow.nonEmpty) {
        _output__.writeTag(26, 2)
        _output__.writeUInt32NoTag(weaponPrivateShowSerializedSize)
        weaponPrivateShow.foreach(_output__.writeUInt32NoTag)
      };
      {
        val __v = weaponDefault
        if (__v != 0) {
          _output__.writeUInt32(27, __v)
        }
      };
      {
        val __v = moveCode
        if (__v != 0) {
          _output__.writeUInt32(28, __v)
        }
      };
      soldGet1.foreach { __v =>
        val __m = GunData._typemapper_soldGet1.toBase(__v)
        _output__.writeTag(29, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = systemSwitch
        if (__v != 0) {
          _output__.writeUInt32(30, __v)
        }
      };
      {
        val __v = useFakeAttack
        if (__v != false) {
          _output__.writeBool(31, __v)
        }
      };
      {
        val __v = camp
        if (__v != 0) {
          _output__.writeUInt32(32, __v)
        }
      };
      {
        val __v = defaultGrade
        if (__v != 0) {
          _output__.writeUInt32(33, __v)
        }
      };
      {
        val __v = unlockCost
        if (__v != 0) {
          _output__.writeUInt32(34, __v)
        }
      };
      {
        val __v = grade
        if (__v != 0) {
          _output__.writeUInt32(35, __v)
        }
      };
      {
        val __v = gunClass
        if (__v != 0) {
          _output__.writeUInt32(36, __v)
        }
      };
      {
        val __v = barrackCameraSetting
        if (!__v.isEmpty) {
          _output__.writeString(37, __v)
        }
      };
      {
        val __v = avatar
        if (__v != 0) {
          _output__.writeUInt32(38, __v)
        }
      };
      {
        val __v = costumeId
        if (__v != 0) {
          _output__.writeUInt32(39, __v)
        }
      };
      if (costumeReplace.nonEmpty) {
        _output__.writeTag(40, 2)
        _output__.writeUInt32NoTag(costumeReplaceSerializedSize)
        costumeReplace.foreach(_output__.writeUInt32NoTag)
      };
      {
        val __v = propertyId
        if (__v != 0) {
          _output__.writeUInt32(41, __v)
        }
      };
      if (barrackEffectId.nonEmpty) {
        _output__.writeTag(42, 2)
        _output__.writeUInt32NoTag(barrackEffectIdSerializedSize)
        barrackEffectId.foreach(_output__.writeUInt32NoTag)
      };
      {
        val __v = weight
        if (__v != 0) {
          _output__.writeUInt32(43, __v)
        }
      };
      {
        val __v = barrackAudioId
        if (__v != 0) {
          _output__.writeUInt32(44, __v)
        }
      };
      {
        val __v = shieldType
        if (__v != 0) {
          _output__.writeUInt32(45, __v)
        }
      };
      {
        val __v = maxGrade
        if (__v != 0) {
          _output__.writeUInt32(46, __v)
        }
      };
      {
        val __v = shieldEffectId
        if (__v != 0) {
          _output__.writeUInt32(47, __v)
        }
      };
      {
        val __v = baseSupply
        if (__v != 0) {
          _output__.writeUInt32(48, __v)
        }
      };
      if (supplyTypeBanList.nonEmpty) {
        _output__.writeTag(49, 2)
        _output__.writeUInt32NoTag(supplyTypeBanListSerializedSize)
        supplyTypeBanList.foreach(_output__.writeUInt32NoTag)
      };
      {
        val __v = extraSkill
        if (__v != 0) {
          _output__.writeUInt32(50, __v)
        }
      };
      {
        val __v = shieldBrokenEffectId
        if (__v != 0) {
          _output__.writeUInt32(51, __v)
        }
      };
      {
        val __v = attackType
        if (__v != 0) {
          _output__.writeUInt32(52, __v)
        }
      };
      {
        val __v = gachaGetTimeline
        if (!__v.isEmpty) {
          _output__.writeString(53, __v)
        }
      };
      if (beSuppressedConfig.nonEmpty) {
        _output__.writeTag(54, 2)
        _output__.writeUInt32NoTag(beSuppressedConfigSerializedSize)
        beSuppressedConfig.foreach(_output__.writeInt32NoTag)
      };
      {
        val __v = shape
        if (__v != 0) {
          _output__.writeUInt32(55, __v)
        }
      };
      {
        val __v = shapeParam
        if (!__v.isEmpty) {
          _output__.writeString(56, __v)
        }
      };
      {
        val __v = shapeIcon
        if (!__v.isEmpty) {
          _output__.writeString(57, __v)
        }
      };
      {
        val __v = shapeTerrain
        if (__v != 0) {
          _output__.writeUInt32(58, __v)
        }
      };
      {
        val __v = idleType
        if (__v != 0) {
          _output__.writeUInt32(59, __v)
        }
      };
      {
        val __v = displacement
        if (__v != 0) {
          _output__.writeUInt32(60, __v)
        }
      };
      {
        val __v = isHide
        if (__v != false) {
          _output__.writeBool(61, __v)
        }
      };
      {
        val __v = weakTag
        if (!__v.isEmpty) {
          _output__.writeString(62, __v)
        }
      };
      {
        val __v = suppressGroup
        if (!__v.isEmpty) {
          _output__.writeString(63, __v)
        }
      };
      {
        val __v = unlockHint
        if (__v != 0) {
          _output__.writeUInt32(64, __v)
        }
      };
      if (unlockDorm.nonEmpty) {
        _output__.writeTag(65, 2)
        _output__.writeUInt32NoTag(unlockDormSerializedSize)
        unlockDorm.foreach(_output__.writeUInt32NoTag)
      };
      {
        val __v = guardRadius
        if (__v != 0) {
          _output__.writeInt32(66, __v)
        }
      };
      {
        val __v = guardRadiusShow
        if (__v != 0) {
          _output__.writeInt32(67, __v)
        }
      };
      {
        val __v = gachaGetAudio
        if (__v != 0) {
          _output__.writeUInt32(68, __v)
        }
      };
      {
        val __v = gachaGetVoice
        if (__v != 0) {
          _output__.writeUInt32(69, __v)
        }
      };
      {
        val __v = weakWeaponTag
        if (__v != 0) {
          _output__.writeInt32(70, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withId(__v: _root_.scala.Int): GunData = copy(id = __v)
    def getName: gfbot.decoder.language_string_data.LanguageStringData = name.getOrElse(gfbot.decoder.language_string_data.LanguageStringData.defaultInstance)
    def clearName: GunData = copy(name = _root_.scala.None)
    def withName(__v: gfbot.decoder.language_string_data.LanguageStringData): GunData = copy(name = Option(__v))
    def getFirstName: gfbot.decoder.language_string_data.LanguageStringData = firstName.getOrElse(gfbot.decoder.language_string_data.LanguageStringData.defaultInstance)
    def clearFirstName: GunData = copy(firstName = _root_.scala.None)
    def withFirstName(__v: gfbot.decoder.language_string_data.LanguageStringData): GunData = copy(firstName = Option(__v))
    def getSecondName: gfbot.decoder.language_string_data.LanguageStringData = secondName.getOrElse(gfbot.decoder.language_string_data.LanguageStringData.defaultInstance)
    def clearSecondName: GunData = copy(secondName = _root_.scala.None)
    def withSecondName(__v: gfbot.decoder.language_string_data.LanguageStringData): GunData = copy(secondName = Option(__v))
    def getEnName: gfbot.decoder.language_string_data.LanguageStringData = enName.getOrElse(gfbot.decoder.language_string_data.LanguageStringData.defaultInstance)
    def clearEnName: GunData = copy(enName = _root_.scala.None)
    def withEnName(__v: gfbot.decoder.language_string_data.LanguageStringData): GunData = copy(enName = Option(__v))
    def getIntroduce: gfbot.decoder.language_string_data.LanguageStringData = introduce.getOrElse(gfbot.decoder.language_string_data.LanguageStringData.defaultInstance)
    def clearIntroduce: GunData = copy(introduce = _root_.scala.None)
    def withIntroduce(__v: gfbot.decoder.language_string_data.LanguageStringData): GunData = copy(introduce = Option(__v))
    def getDialogue: gfbot.decoder.language_string_data.LanguageStringData = dialogue.getOrElse(gfbot.decoder.language_string_data.LanguageStringData.defaultInstance)
    def clearDialogue: GunData = copy(dialogue = _root_.scala.None)
    def withDialogue(__v: gfbot.decoder.language_string_data.LanguageStringData): GunData = copy(dialogue = Option(__v))
    def getExtra: gfbot.decoder.language_string_data.LanguageStringData = extra.getOrElse(gfbot.decoder.language_string_data.LanguageStringData.defaultInstance)
    def clearExtra: GunData = copy(extra = _root_.scala.None)
    def withExtra(__v: gfbot.decoder.language_string_data.LanguageStringData): GunData = copy(extra = Option(__v))
    def withCode(__v: _root_.scala.Predef.String): GunData = copy(code = __v)
    def withType(__v: _root_.scala.Int): GunData = copy(`type` = __v)
    def withCharacterId(__v: _root_.scala.Int): GunData = copy(characterId = __v)
    def withGetAudio(__v: _root_.scala.Int): GunData = copy(getAudio = __v)
    def withDuty(__v: _root_.scala.Int): GunData = copy(duty = __v)
    def withSecondDuty(__v: _root_.scala.Int): GunData = copy(secondDuty = __v)
    def withRank(__v: _root_.scala.Int): GunData = copy(rank = __v)
    def withRoleTemplateId(__v: _root_.scala.Int): GunData = copy(roleTemplateId = __v)
    def withCoreItemId(__v: _root_.scala.Int): GunData = copy(coreItemId = __v)
    def getUpgradeSpeech: gfbot.decoder.language_string_data.LanguageStringData = upgradeSpeech.getOrElse(gfbot.decoder.language_string_data.LanguageStringData.defaultInstance)
    def clearUpgradeSpeech: GunData = copy(upgradeSpeech = _root_.scala.None)
    def withUpgradeSpeech(__v: gfbot.decoder.language_string_data.LanguageStringData): GunData = copy(upgradeSpeech = Option(__v))
    def withSkillNormalAttack(__v: _root_.scala.Int): GunData = copy(skillNormalAttack = __v)
    def clearSkillActiveExtra = copy(skillActiveExtra = _root_.scala.Seq.empty)
    def addSkillActiveExtra(__vs: _root_.scala.Int *): GunData = addAllSkillActiveExtra(__vs)
    def addAllSkillActiveExtra(__vs: Iterable[_root_.scala.Int]): GunData = copy(skillActiveExtra = skillActiveExtra ++ __vs)
    def withSkillActiveExtra(__v: _root_.scala.Seq[_root_.scala.Int]): GunData = copy(skillActiveExtra = __v)
    def clearSkillTalentExtra = copy(skillTalentExtra = _root_.scala.Seq.empty)
    def addSkillTalentExtra(__vs: _root_.scala.Int *): GunData = addAllSkillTalentExtra(__vs)
    def addAllSkillTalentExtra(__vs: Iterable[_root_.scala.Int]): GunData = copy(skillTalentExtra = skillTalentExtra ++ __vs)
    def withSkillTalentExtra(__v: _root_.scala.Seq[_root_.scala.Int]): GunData = copy(skillTalentExtra = __v)
    def clearAiList = copy(aiList = _root_.scala.Seq.empty)
    def addAiList(__vs: _root_.scala.Int *): GunData = addAllAiList(__vs)
    def addAllAiList(__vs: Iterable[_root_.scala.Int]): GunData = copy(aiList = aiList ++ __vs)
    def withAiList(__v: _root_.scala.Seq[_root_.scala.Int]): GunData = copy(aiList = __v)
    def withElement(__v: _root_.scala.Int): GunData = copy(element = __v)
    def withWeaponType(__v: _root_.scala.Int): GunData = copy(weaponType = __v)
    def clearWeaponPrivate = copy(weaponPrivate = _root_.scala.Seq.empty)
    def addWeaponPrivate(__vs: _root_.scala.Int *): GunData = addAllWeaponPrivate(__vs)
    def addAllWeaponPrivate(__vs: Iterable[_root_.scala.Int]): GunData = copy(weaponPrivate = weaponPrivate ++ __vs)
    def withWeaponPrivate(__v: _root_.scala.Seq[_root_.scala.Int]): GunData = copy(weaponPrivate = __v)
    def clearWeaponPrivateShow = copy(weaponPrivateShow = _root_.scala.Seq.empty)
    def addWeaponPrivateShow(__vs: _root_.scala.Int *): GunData = addAllWeaponPrivateShow(__vs)
    def addAllWeaponPrivateShow(__vs: Iterable[_root_.scala.Int]): GunData = copy(weaponPrivateShow = weaponPrivateShow ++ __vs)
    def withWeaponPrivateShow(__v: _root_.scala.Seq[_root_.scala.Int]): GunData = copy(weaponPrivateShow = __v)
    def withWeaponDefault(__v: _root_.scala.Int): GunData = copy(weaponDefault = __v)
    def withMoveCode(__v: _root_.scala.Int): GunData = copy(moveCode = __v)
    def clearSoldGet1 = copy(soldGet1 = _root_.scala.collection.immutable.Map.empty)
    def addSoldGet1(__vs: (_root_.scala.Int, _root_.scala.Int) *): GunData = addAllSoldGet1(__vs)
    def addAllSoldGet1(__vs: Iterable[(_root_.scala.Int, _root_.scala.Int)]): GunData = copy(soldGet1 = soldGet1 ++ __vs)
    def withSoldGet1(__v: _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Int]): GunData = copy(soldGet1 = __v)
    def withSystemSwitch(__v: _root_.scala.Int): GunData = copy(systemSwitch = __v)
    def withUseFakeAttack(__v: _root_.scala.Boolean): GunData = copy(useFakeAttack = __v)
    def withCamp(__v: _root_.scala.Int): GunData = copy(camp = __v)
    def withDefaultGrade(__v: _root_.scala.Int): GunData = copy(defaultGrade = __v)
    def withUnlockCost(__v: _root_.scala.Int): GunData = copy(unlockCost = __v)
    def withGrade(__v: _root_.scala.Int): GunData = copy(grade = __v)
    def withGunClass(__v: _root_.scala.Int): GunData = copy(gunClass = __v)
    def withBarrackCameraSetting(__v: _root_.scala.Predef.String): GunData = copy(barrackCameraSetting = __v)
    def withAvatar(__v: _root_.scala.Int): GunData = copy(avatar = __v)
    def withCostumeId(__v: _root_.scala.Int): GunData = copy(costumeId = __v)
    def clearCostumeReplace = copy(costumeReplace = _root_.scala.Seq.empty)
    def addCostumeReplace(__vs: _root_.scala.Int *): GunData = addAllCostumeReplace(__vs)
    def addAllCostumeReplace(__vs: Iterable[_root_.scala.Int]): GunData = copy(costumeReplace = costumeReplace ++ __vs)
    def withCostumeReplace(__v: _root_.scala.Seq[_root_.scala.Int]): GunData = copy(costumeReplace = __v)
    def withPropertyId(__v: _root_.scala.Int): GunData = copy(propertyId = __v)
    def clearBarrackEffectId = copy(barrackEffectId = _root_.scala.Seq.empty)
    def addBarrackEffectId(__vs: _root_.scala.Int *): GunData = addAllBarrackEffectId(__vs)
    def addAllBarrackEffectId(__vs: Iterable[_root_.scala.Int]): GunData = copy(barrackEffectId = barrackEffectId ++ __vs)
    def withBarrackEffectId(__v: _root_.scala.Seq[_root_.scala.Int]): GunData = copy(barrackEffectId = __v)
    def withWeight(__v: _root_.scala.Int): GunData = copy(weight = __v)
    def withBarrackAudioId(__v: _root_.scala.Int): GunData = copy(barrackAudioId = __v)
    def withShieldType(__v: _root_.scala.Int): GunData = copy(shieldType = __v)
    def withMaxGrade(__v: _root_.scala.Int): GunData = copy(maxGrade = __v)
    def withShieldEffectId(__v: _root_.scala.Int): GunData = copy(shieldEffectId = __v)
    def withBaseSupply(__v: _root_.scala.Int): GunData = copy(baseSupply = __v)
    def clearSupplyTypeBanList = copy(supplyTypeBanList = _root_.scala.Seq.empty)
    def addSupplyTypeBanList(__vs: _root_.scala.Int *): GunData = addAllSupplyTypeBanList(__vs)
    def addAllSupplyTypeBanList(__vs: Iterable[_root_.scala.Int]): GunData = copy(supplyTypeBanList = supplyTypeBanList ++ __vs)
    def withSupplyTypeBanList(__v: _root_.scala.Seq[_root_.scala.Int]): GunData = copy(supplyTypeBanList = __v)
    def withExtraSkill(__v: _root_.scala.Int): GunData = copy(extraSkill = __v)
    def withShieldBrokenEffectId(__v: _root_.scala.Int): GunData = copy(shieldBrokenEffectId = __v)
    def withAttackType(__v: _root_.scala.Int): GunData = copy(attackType = __v)
    def withGachaGetTimeline(__v: _root_.scala.Predef.String): GunData = copy(gachaGetTimeline = __v)
    def clearBeSuppressedConfig = copy(beSuppressedConfig = _root_.scala.Seq.empty)
    def addBeSuppressedConfig(__vs: _root_.scala.Int *): GunData = addAllBeSuppressedConfig(__vs)
    def addAllBeSuppressedConfig(__vs: Iterable[_root_.scala.Int]): GunData = copy(beSuppressedConfig = beSuppressedConfig ++ __vs)
    def withBeSuppressedConfig(__v: _root_.scala.Seq[_root_.scala.Int]): GunData = copy(beSuppressedConfig = __v)
    def withShape(__v: _root_.scala.Int): GunData = copy(shape = __v)
    def withShapeParam(__v: _root_.scala.Predef.String): GunData = copy(shapeParam = __v)
    def withShapeIcon(__v: _root_.scala.Predef.String): GunData = copy(shapeIcon = __v)
    def withShapeTerrain(__v: _root_.scala.Int): GunData = copy(shapeTerrain = __v)
    def withIdleType(__v: _root_.scala.Int): GunData = copy(idleType = __v)
    def withDisplacement(__v: _root_.scala.Int): GunData = copy(displacement = __v)
    def withIsHide(__v: _root_.scala.Boolean): GunData = copy(isHide = __v)
    def withWeakTag(__v: _root_.scala.Predef.String): GunData = copy(weakTag = __v)
    def withSuppressGroup(__v: _root_.scala.Predef.String): GunData = copy(suppressGroup = __v)
    def withUnlockHint(__v: _root_.scala.Int): GunData = copy(unlockHint = __v)
    def clearUnlockDorm = copy(unlockDorm = _root_.scala.Seq.empty)
    def addUnlockDorm(__vs: _root_.scala.Int *): GunData = addAllUnlockDorm(__vs)
    def addAllUnlockDorm(__vs: Iterable[_root_.scala.Int]): GunData = copy(unlockDorm = unlockDorm ++ __vs)
    def withUnlockDorm(__v: _root_.scala.Seq[_root_.scala.Int]): GunData = copy(unlockDorm = __v)
    def withGuardRadius(__v: _root_.scala.Int): GunData = copy(guardRadius = __v)
    def withGuardRadiusShow(__v: _root_.scala.Int): GunData = copy(guardRadiusShow = __v)
    def withGachaGetAudio(__v: _root_.scala.Int): GunData = copy(gachaGetAudio = __v)
    def withGachaGetVoice(__v: _root_.scala.Int): GunData = copy(gachaGetVoice = __v)
    def withWeakWeaponTag(__v: _root_.scala.Int): GunData = copy(weakWeaponTag = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = id
          if (__t != 0) __t else null
        }
        case 2 => name.orNull
        case 3 => firstName.orNull
        case 4 => secondName.orNull
        case 5 => enName.orNull
        case 6 => introduce.orNull
        case 7 => dialogue.orNull
        case 8 => extra.orNull
        case 9 => {
          val __t = code
          if (__t != "") __t else null
        }
        case 10 => {
          val __t = `type`
          if (__t != 0) __t else null
        }
        case 11 => {
          val __t = characterId
          if (__t != 0) __t else null
        }
        case 12 => {
          val __t = getAudio
          if (__t != 0) __t else null
        }
        case 13 => {
          val __t = duty
          if (__t != 0) __t else null
        }
        case 14 => {
          val __t = secondDuty
          if (__t != 0) __t else null
        }
        case 15 => {
          val __t = rank
          if (__t != 0) __t else null
        }
        case 16 => {
          val __t = roleTemplateId
          if (__t != 0) __t else null
        }
        case 17 => {
          val __t = coreItemId
          if (__t != 0) __t else null
        }
        case 18 => upgradeSpeech.orNull
        case 19 => {
          val __t = skillNormalAttack
          if (__t != 0) __t else null
        }
        case 20 => skillActiveExtra
        case 21 => skillTalentExtra
        case 22 => aiList
        case 23 => {
          val __t = element
          if (__t != 0) __t else null
        }
        case 24 => {
          val __t = weaponType
          if (__t != 0) __t else null
        }
        case 25 => weaponPrivate
        case 26 => weaponPrivateShow
        case 27 => {
          val __t = weaponDefault
          if (__t != 0) __t else null
        }
        case 28 => {
          val __t = moveCode
          if (__t != 0) __t else null
        }
        case 29 => soldGet1.iterator.map(GunData._typemapper_soldGet1.toBase(_)).toSeq
        case 30 => {
          val __t = systemSwitch
          if (__t != 0) __t else null
        }
        case 31 => {
          val __t = useFakeAttack
          if (__t != false) __t else null
        }
        case 32 => {
          val __t = camp
          if (__t != 0) __t else null
        }
        case 33 => {
          val __t = defaultGrade
          if (__t != 0) __t else null
        }
        case 34 => {
          val __t = unlockCost
          if (__t != 0) __t else null
        }
        case 35 => {
          val __t = grade
          if (__t != 0) __t else null
        }
        case 36 => {
          val __t = gunClass
          if (__t != 0) __t else null
        }
        case 37 => {
          val __t = barrackCameraSetting
          if (__t != "") __t else null
        }
        case 38 => {
          val __t = avatar
          if (__t != 0) __t else null
        }
        case 39 => {
          val __t = costumeId
          if (__t != 0) __t else null
        }
        case 40 => costumeReplace
        case 41 => {
          val __t = propertyId
          if (__t != 0) __t else null
        }
        case 42 => barrackEffectId
        case 43 => {
          val __t = weight
          if (__t != 0) __t else null
        }
        case 44 => {
          val __t = barrackAudioId
          if (__t != 0) __t else null
        }
        case 45 => {
          val __t = shieldType
          if (__t != 0) __t else null
        }
        case 46 => {
          val __t = maxGrade
          if (__t != 0) __t else null
        }
        case 47 => {
          val __t = shieldEffectId
          if (__t != 0) __t else null
        }
        case 48 => {
          val __t = baseSupply
          if (__t != 0) __t else null
        }
        case 49 => supplyTypeBanList
        case 50 => {
          val __t = extraSkill
          if (__t != 0) __t else null
        }
        case 51 => {
          val __t = shieldBrokenEffectId
          if (__t != 0) __t else null
        }
        case 52 => {
          val __t = attackType
          if (__t != 0) __t else null
        }
        case 53 => {
          val __t = gachaGetTimeline
          if (__t != "") __t else null
        }
        case 54 => beSuppressedConfig
        case 55 => {
          val __t = shape
          if (__t != 0) __t else null
        }
        case 56 => {
          val __t = shapeParam
          if (__t != "") __t else null
        }
        case 57 => {
          val __t = shapeIcon
          if (__t != "") __t else null
        }
        case 58 => {
          val __t = shapeTerrain
          if (__t != 0) __t else null
        }
        case 59 => {
          val __t = idleType
          if (__t != 0) __t else null
        }
        case 60 => {
          val __t = displacement
          if (__t != 0) __t else null
        }
        case 61 => {
          val __t = isHide
          if (__t != false) __t else null
        }
        case 62 => {
          val __t = weakTag
          if (__t != "") __t else null
        }
        case 63 => {
          val __t = suppressGroup
          if (__t != "") __t else null
        }
        case 64 => {
          val __t = unlockHint
          if (__t != 0) __t else null
        }
        case 65 => unlockDorm
        case 66 => {
          val __t = guardRadius
          if (__t != 0) __t else null
        }
        case 67 => {
          val __t = guardRadiusShow
          if (__t != 0) __t else null
        }
        case 68 => {
          val __t = gachaGetAudio
          if (__t != 0) __t else null
        }
        case 69 => {
          val __t = gachaGetVoice
          if (__t != 0) __t else null
        }
        case 70 => {
          val __t = weakWeaponTag
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(id)
        case 2 => name.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => firstName.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => secondName.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => enName.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => introduce.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => dialogue.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => extra.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => _root_.scalapb.descriptors.PString(code)
        case 10 => _root_.scalapb.descriptors.PInt(`type`)
        case 11 => _root_.scalapb.descriptors.PInt(characterId)
        case 12 => _root_.scalapb.descriptors.PInt(getAudio)
        case 13 => _root_.scalapb.descriptors.PInt(duty)
        case 14 => _root_.scalapb.descriptors.PInt(secondDuty)
        case 15 => _root_.scalapb.descriptors.PInt(rank)
        case 16 => _root_.scalapb.descriptors.PInt(roleTemplateId)
        case 17 => _root_.scalapb.descriptors.PInt(coreItemId)
        case 18 => upgradeSpeech.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 19 => _root_.scalapb.descriptors.PInt(skillNormalAttack)
        case 20 => _root_.scalapb.descriptors.PRepeated(skillActiveExtra.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
        case 21 => _root_.scalapb.descriptors.PRepeated(skillTalentExtra.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
        case 22 => _root_.scalapb.descriptors.PRepeated(aiList.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
        case 23 => _root_.scalapb.descriptors.PInt(element)
        case 24 => _root_.scalapb.descriptors.PInt(weaponType)
        case 25 => _root_.scalapb.descriptors.PRepeated(weaponPrivate.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
        case 26 => _root_.scalapb.descriptors.PRepeated(weaponPrivateShow.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
        case 27 => _root_.scalapb.descriptors.PInt(weaponDefault)
        case 28 => _root_.scalapb.descriptors.PInt(moveCode)
        case 29 => _root_.scalapb.descriptors.PRepeated(soldGet1.iterator.map(GunData._typemapper_soldGet1.toBase(_).toPMessage).toVector)
        case 30 => _root_.scalapb.descriptors.PInt(systemSwitch)
        case 31 => _root_.scalapb.descriptors.PBoolean(useFakeAttack)
        case 32 => _root_.scalapb.descriptors.PInt(camp)
        case 33 => _root_.scalapb.descriptors.PInt(defaultGrade)
        case 34 => _root_.scalapb.descriptors.PInt(unlockCost)
        case 35 => _root_.scalapb.descriptors.PInt(grade)
        case 36 => _root_.scalapb.descriptors.PInt(gunClass)
        case 37 => _root_.scalapb.descriptors.PString(barrackCameraSetting)
        case 38 => _root_.scalapb.descriptors.PInt(avatar)
        case 39 => _root_.scalapb.descriptors.PInt(costumeId)
        case 40 => _root_.scalapb.descriptors.PRepeated(costumeReplace.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
        case 41 => _root_.scalapb.descriptors.PInt(propertyId)
        case 42 => _root_.scalapb.descriptors.PRepeated(barrackEffectId.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
        case 43 => _root_.scalapb.descriptors.PInt(weight)
        case 44 => _root_.scalapb.descriptors.PInt(barrackAudioId)
        case 45 => _root_.scalapb.descriptors.PInt(shieldType)
        case 46 => _root_.scalapb.descriptors.PInt(maxGrade)
        case 47 => _root_.scalapb.descriptors.PInt(shieldEffectId)
        case 48 => _root_.scalapb.descriptors.PInt(baseSupply)
        case 49 => _root_.scalapb.descriptors.PRepeated(supplyTypeBanList.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
        case 50 => _root_.scalapb.descriptors.PInt(extraSkill)
        case 51 => _root_.scalapb.descriptors.PInt(shieldBrokenEffectId)
        case 52 => _root_.scalapb.descriptors.PInt(attackType)
        case 53 => _root_.scalapb.descriptors.PString(gachaGetTimeline)
        case 54 => _root_.scalapb.descriptors.PRepeated(beSuppressedConfig.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
        case 55 => _root_.scalapb.descriptors.PInt(shape)
        case 56 => _root_.scalapb.descriptors.PString(shapeParam)
        case 57 => _root_.scalapb.descriptors.PString(shapeIcon)
        case 58 => _root_.scalapb.descriptors.PInt(shapeTerrain)
        case 59 => _root_.scalapb.descriptors.PInt(idleType)
        case 60 => _root_.scalapb.descriptors.PInt(displacement)
        case 61 => _root_.scalapb.descriptors.PBoolean(isHide)
        case 62 => _root_.scalapb.descriptors.PString(weakTag)
        case 63 => _root_.scalapb.descriptors.PString(suppressGroup)
        case 64 => _root_.scalapb.descriptors.PInt(unlockHint)
        case 65 => _root_.scalapb.descriptors.PRepeated(unlockDorm.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
        case 66 => _root_.scalapb.descriptors.PInt(guardRadius)
        case 67 => _root_.scalapb.descriptors.PInt(guardRadiusShow)
        case 68 => _root_.scalapb.descriptors.PInt(gachaGetAudio)
        case 69 => _root_.scalapb.descriptors.PInt(gachaGetVoice)
        case 70 => _root_.scalapb.descriptors.PInt(weakWeaponTag)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: GunData.type = GunData
    // @@protoc_insertion_point(GeneratedMessage[GunData])
}

object GunData extends scalapb.GeneratedMessageCompanion[GunData] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[GunData] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): GunData = {
    var __id: _root_.scala.Int = 0
    var __name: _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData] = _root_.scala.None
    var __firstName: _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData] = _root_.scala.None
    var __secondName: _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData] = _root_.scala.None
    var __enName: _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData] = _root_.scala.None
    var __introduce: _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData] = _root_.scala.None
    var __dialogue: _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData] = _root_.scala.None
    var __extra: _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData] = _root_.scala.None
    var __code: _root_.scala.Predef.String = ""
    var __type: _root_.scala.Int = 0
    var __characterId: _root_.scala.Int = 0
    var __getAudio: _root_.scala.Int = 0
    var __duty: _root_.scala.Int = 0
    var __secondDuty: _root_.scala.Int = 0
    var __rank: _root_.scala.Int = 0
    var __roleTemplateId: _root_.scala.Int = 0
    var __coreItemId: _root_.scala.Int = 0
    var __upgradeSpeech: _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData] = _root_.scala.None
    var __skillNormalAttack: _root_.scala.Int = 0
    val __skillActiveExtra: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int]
    val __skillTalentExtra: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int]
    val __aiList: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int]
    var __element: _root_.scala.Int = 0
    var __weaponType: _root_.scala.Int = 0
    val __weaponPrivate: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int]
    val __weaponPrivateShow: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int]
    var __weaponDefault: _root_.scala.Int = 0
    var __moveCode: _root_.scala.Int = 0
    val __soldGet1: _root_.scala.collection.mutable.Builder[(_root_.scala.Int, _root_.scala.Int), _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Int]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Int, _root_.scala.Int]
    var __systemSwitch: _root_.scala.Int = 0
    var __useFakeAttack: _root_.scala.Boolean = false
    var __camp: _root_.scala.Int = 0
    var __defaultGrade: _root_.scala.Int = 0
    var __unlockCost: _root_.scala.Int = 0
    var __grade: _root_.scala.Int = 0
    var __gunClass: _root_.scala.Int = 0
    var __barrackCameraSetting: _root_.scala.Predef.String = ""
    var __avatar: _root_.scala.Int = 0
    var __costumeId: _root_.scala.Int = 0
    val __costumeReplace: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int]
    var __propertyId: _root_.scala.Int = 0
    val __barrackEffectId: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int]
    var __weight: _root_.scala.Int = 0
    var __barrackAudioId: _root_.scala.Int = 0
    var __shieldType: _root_.scala.Int = 0
    var __maxGrade: _root_.scala.Int = 0
    var __shieldEffectId: _root_.scala.Int = 0
    var __baseSupply: _root_.scala.Int = 0
    val __supplyTypeBanList: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int]
    var __extraSkill: _root_.scala.Int = 0
    var __shieldBrokenEffectId: _root_.scala.Int = 0
    var __attackType: _root_.scala.Int = 0
    var __gachaGetTimeline: _root_.scala.Predef.String = ""
    val __beSuppressedConfig: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int]
    var __shape: _root_.scala.Int = 0
    var __shapeParam: _root_.scala.Predef.String = ""
    var __shapeIcon: _root_.scala.Predef.String = ""
    var __shapeTerrain: _root_.scala.Int = 0
    var __idleType: _root_.scala.Int = 0
    var __displacement: _root_.scala.Int = 0
    var __isHide: _root_.scala.Boolean = false
    var __weakTag: _root_.scala.Predef.String = ""
    var __suppressGroup: _root_.scala.Predef.String = ""
    var __unlockHint: _root_.scala.Int = 0
    val __unlockDorm: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int]
    var __guardRadius: _root_.scala.Int = 0
    var __guardRadiusShow: _root_.scala.Int = 0
    var __gachaGetAudio: _root_.scala.Int = 0
    var __gachaGetVoice: _root_.scala.Int = 0
    var __weakWeaponTag: _root_.scala.Int = 0
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __id = _input__.readUInt32()
        case 18 =>
          __name = Option(__name.fold(_root_.scalapb.LiteParser.readMessage[gfbot.decoder.language_string_data.LanguageStringData](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __firstName = Option(__firstName.fold(_root_.scalapb.LiteParser.readMessage[gfbot.decoder.language_string_data.LanguageStringData](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __secondName = Option(__secondName.fold(_root_.scalapb.LiteParser.readMessage[gfbot.decoder.language_string_data.LanguageStringData](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 42 =>
          __enName = Option(__enName.fold(_root_.scalapb.LiteParser.readMessage[gfbot.decoder.language_string_data.LanguageStringData](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 50 =>
          __introduce = Option(__introduce.fold(_root_.scalapb.LiteParser.readMessage[gfbot.decoder.language_string_data.LanguageStringData](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 58 =>
          __dialogue = Option(__dialogue.fold(_root_.scalapb.LiteParser.readMessage[gfbot.decoder.language_string_data.LanguageStringData](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 66 =>
          __extra = Option(__extra.fold(_root_.scalapb.LiteParser.readMessage[gfbot.decoder.language_string_data.LanguageStringData](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 74 =>
          __code = _input__.readStringRequireUtf8()
        case 80 =>
          __type = _input__.readInt32()
        case 88 =>
          __characterId = _input__.readUInt32()
        case 96 =>
          __getAudio = _input__.readUInt32()
        case 104 =>
          __duty = _input__.readInt32()
        case 112 =>
          __secondDuty = _input__.readUInt32()
        case 120 =>
          __rank = _input__.readInt32()
        case 128 =>
          __roleTemplateId = _input__.readUInt32()
        case 136 =>
          __coreItemId = _input__.readUInt32()
        case 146 =>
          __upgradeSpeech = Option(__upgradeSpeech.fold(_root_.scalapb.LiteParser.readMessage[gfbot.decoder.language_string_data.LanguageStringData](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 152 =>
          __skillNormalAttack = _input__.readUInt32()
        case 160 =>
          __skillActiveExtra += _input__.readUInt32()
        case 162 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __skillActiveExtra += _input__.readUInt32()
          }
          _input__.popLimit(oldLimit)
        }
        case 168 =>
          __skillTalentExtra += _input__.readUInt32()
        case 170 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __skillTalentExtra += _input__.readUInt32()
          }
          _input__.popLimit(oldLimit)
        }
        case 176 =>
          __aiList += _input__.readInt32()
        case 178 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __aiList += _input__.readInt32()
          }
          _input__.popLimit(oldLimit)
        }
        case 184 =>
          __element = _input__.readUInt32()
        case 192 =>
          __weaponType = _input__.readUInt32()
        case 200 =>
          __weaponPrivate += _input__.readUInt32()
        case 202 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __weaponPrivate += _input__.readUInt32()
          }
          _input__.popLimit(oldLimit)
        }
        case 208 =>
          __weaponPrivateShow += _input__.readUInt32()
        case 210 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __weaponPrivateShow += _input__.readUInt32()
          }
          _input__.popLimit(oldLimit)
        }
        case 216 =>
          __weaponDefault = _input__.readUInt32()
        case 224 =>
          __moveCode = _input__.readUInt32()
        case 234 =>
          __soldGet1 += GunData._typemapper_soldGet1.toCustom(_root_.scalapb.LiteParser.readMessage[GunData.SoldGet1Entry](_input__))
        case 240 =>
          __systemSwitch = _input__.readUInt32()
        case 248 =>
          __useFakeAttack = _input__.readBool()
        case 256 =>
          __camp = _input__.readUInt32()
        case 264 =>
          __defaultGrade = _input__.readUInt32()
        case 272 =>
          __unlockCost = _input__.readUInt32()
        case 280 =>
          __grade = _input__.readUInt32()
        case 288 =>
          __gunClass = _input__.readUInt32()
        case 298 =>
          __barrackCameraSetting = _input__.readStringRequireUtf8()
        case 304 =>
          __avatar = _input__.readUInt32()
        case 312 =>
          __costumeId = _input__.readUInt32()
        case 320 =>
          __costumeReplace += _input__.readUInt32()
        case 322 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __costumeReplace += _input__.readUInt32()
          }
          _input__.popLimit(oldLimit)
        }
        case 328 =>
          __propertyId = _input__.readUInt32()
        case 336 =>
          __barrackEffectId += _input__.readUInt32()
        case 338 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __barrackEffectId += _input__.readUInt32()
          }
          _input__.popLimit(oldLimit)
        }
        case 344 =>
          __weight = _input__.readUInt32()
        case 352 =>
          __barrackAudioId = _input__.readUInt32()
        case 360 =>
          __shieldType = _input__.readUInt32()
        case 368 =>
          __maxGrade = _input__.readUInt32()
        case 376 =>
          __shieldEffectId = _input__.readUInt32()
        case 384 =>
          __baseSupply = _input__.readUInt32()
        case 392 =>
          __supplyTypeBanList += _input__.readUInt32()
        case 394 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __supplyTypeBanList += _input__.readUInt32()
          }
          _input__.popLimit(oldLimit)
        }
        case 400 =>
          __extraSkill = _input__.readUInt32()
        case 408 =>
          __shieldBrokenEffectId = _input__.readUInt32()
        case 416 =>
          __attackType = _input__.readUInt32()
        case 426 =>
          __gachaGetTimeline = _input__.readStringRequireUtf8()
        case 432 =>
          __beSuppressedConfig += _input__.readInt32()
        case 434 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __beSuppressedConfig += _input__.readInt32()
          }
          _input__.popLimit(oldLimit)
        }
        case 440 =>
          __shape = _input__.readUInt32()
        case 450 =>
          __shapeParam = _input__.readStringRequireUtf8()
        case 458 =>
          __shapeIcon = _input__.readStringRequireUtf8()
        case 464 =>
          __shapeTerrain = _input__.readUInt32()
        case 472 =>
          __idleType = _input__.readUInt32()
        case 480 =>
          __displacement = _input__.readUInt32()
        case 488 =>
          __isHide = _input__.readBool()
        case 498 =>
          __weakTag = _input__.readStringRequireUtf8()
        case 506 =>
          __suppressGroup = _input__.readStringRequireUtf8()
        case 512 =>
          __unlockHint = _input__.readUInt32()
        case 520 =>
          __unlockDorm += _input__.readUInt32()
        case 522 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __unlockDorm += _input__.readUInt32()
          }
          _input__.popLimit(oldLimit)
        }
        case 528 =>
          __guardRadius = _input__.readInt32()
        case 536 =>
          __guardRadiusShow = _input__.readInt32()
        case 544 =>
          __gachaGetAudio = _input__.readUInt32()
        case 552 =>
          __gachaGetVoice = _input__.readUInt32()
        case 560 =>
          __weakWeaponTag = _input__.readInt32()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    GunData(
        id = __id,
        name = __name,
        firstName = __firstName,
        secondName = __secondName,
        enName = __enName,
        introduce = __introduce,
        dialogue = __dialogue,
        extra = __extra,
        code = __code,
        `type` = __type,
        characterId = __characterId,
        getAudio = __getAudio,
        duty = __duty,
        secondDuty = __secondDuty,
        rank = __rank,
        roleTemplateId = __roleTemplateId,
        coreItemId = __coreItemId,
        upgradeSpeech = __upgradeSpeech,
        skillNormalAttack = __skillNormalAttack,
        skillActiveExtra = __skillActiveExtra.result(),
        skillTalentExtra = __skillTalentExtra.result(),
        aiList = __aiList.result(),
        element = __element,
        weaponType = __weaponType,
        weaponPrivate = __weaponPrivate.result(),
        weaponPrivateShow = __weaponPrivateShow.result(),
        weaponDefault = __weaponDefault,
        moveCode = __moveCode,
        soldGet1 = __soldGet1.result(),
        systemSwitch = __systemSwitch,
        useFakeAttack = __useFakeAttack,
        camp = __camp,
        defaultGrade = __defaultGrade,
        unlockCost = __unlockCost,
        grade = __grade,
        gunClass = __gunClass,
        barrackCameraSetting = __barrackCameraSetting,
        avatar = __avatar,
        costumeId = __costumeId,
        costumeReplace = __costumeReplace.result(),
        propertyId = __propertyId,
        barrackEffectId = __barrackEffectId.result(),
        weight = __weight,
        barrackAudioId = __barrackAudioId,
        shieldType = __shieldType,
        maxGrade = __maxGrade,
        shieldEffectId = __shieldEffectId,
        baseSupply = __baseSupply,
        supplyTypeBanList = __supplyTypeBanList.result(),
        extraSkill = __extraSkill,
        shieldBrokenEffectId = __shieldBrokenEffectId,
        attackType = __attackType,
        gachaGetTimeline = __gachaGetTimeline,
        beSuppressedConfig = __beSuppressedConfig.result(),
        shape = __shape,
        shapeParam = __shapeParam,
        shapeIcon = __shapeIcon,
        shapeTerrain = __shapeTerrain,
        idleType = __idleType,
        displacement = __displacement,
        isHide = __isHide,
        weakTag = __weakTag,
        suppressGroup = __suppressGroup,
        unlockHint = __unlockHint,
        unlockDorm = __unlockDorm.result(),
        guardRadius = __guardRadius,
        guardRadiusShow = __guardRadiusShow,
        gachaGetAudio = __gachaGetAudio,
        gachaGetVoice = __gachaGetVoice,
        weakWeaponTag = __weakWeaponTag,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[GunData] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      GunData(
        id = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData]]),
        firstName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData]]),
        secondName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData]]),
        enName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData]]),
        introduce = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData]]),
        dialogue = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData]]),
        extra = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData]]),
        code = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        `type` = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        characterId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        getAudio = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        duty = __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        secondDuty = __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        rank = __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        roleTemplateId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        coreItemId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        upgradeSpeech = __fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).flatMap(_.as[_root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData]]),
        skillNormalAttack = __fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        skillActiveExtra = __fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty),
        skillTalentExtra = __fieldsMap.get(scalaDescriptor.findFieldByNumber(21).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty),
        aiList = __fieldsMap.get(scalaDescriptor.findFieldByNumber(22).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty),
        element = __fieldsMap.get(scalaDescriptor.findFieldByNumber(23).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        weaponType = __fieldsMap.get(scalaDescriptor.findFieldByNumber(24).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        weaponPrivate = __fieldsMap.get(scalaDescriptor.findFieldByNumber(25).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty),
        weaponPrivateShow = __fieldsMap.get(scalaDescriptor.findFieldByNumber(26).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty),
        weaponDefault = __fieldsMap.get(scalaDescriptor.findFieldByNumber(27).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        moveCode = __fieldsMap.get(scalaDescriptor.findFieldByNumber(28).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        soldGet1 = __fieldsMap.get(scalaDescriptor.findFieldByNumber(29).get).map(_.as[_root_.scala.Seq[GunData.SoldGet1Entry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(GunData._typemapper_soldGet1.toCustom(_)).toMap,
        systemSwitch = __fieldsMap.get(scalaDescriptor.findFieldByNumber(30).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        useFakeAttack = __fieldsMap.get(scalaDescriptor.findFieldByNumber(31).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        camp = __fieldsMap.get(scalaDescriptor.findFieldByNumber(32).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        defaultGrade = __fieldsMap.get(scalaDescriptor.findFieldByNumber(33).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        unlockCost = __fieldsMap.get(scalaDescriptor.findFieldByNumber(34).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        grade = __fieldsMap.get(scalaDescriptor.findFieldByNumber(35).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        gunClass = __fieldsMap.get(scalaDescriptor.findFieldByNumber(36).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        barrackCameraSetting = __fieldsMap.get(scalaDescriptor.findFieldByNumber(37).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        avatar = __fieldsMap.get(scalaDescriptor.findFieldByNumber(38).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        costumeId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(39).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        costumeReplace = __fieldsMap.get(scalaDescriptor.findFieldByNumber(40).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty),
        propertyId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(41).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        barrackEffectId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(42).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty),
        weight = __fieldsMap.get(scalaDescriptor.findFieldByNumber(43).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        barrackAudioId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(44).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        shieldType = __fieldsMap.get(scalaDescriptor.findFieldByNumber(45).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        maxGrade = __fieldsMap.get(scalaDescriptor.findFieldByNumber(46).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        shieldEffectId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(47).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        baseSupply = __fieldsMap.get(scalaDescriptor.findFieldByNumber(48).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        supplyTypeBanList = __fieldsMap.get(scalaDescriptor.findFieldByNumber(49).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty),
        extraSkill = __fieldsMap.get(scalaDescriptor.findFieldByNumber(50).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        shieldBrokenEffectId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(51).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        attackType = __fieldsMap.get(scalaDescriptor.findFieldByNumber(52).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        gachaGetTimeline = __fieldsMap.get(scalaDescriptor.findFieldByNumber(53).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        beSuppressedConfig = __fieldsMap.get(scalaDescriptor.findFieldByNumber(54).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty),
        shape = __fieldsMap.get(scalaDescriptor.findFieldByNumber(55).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        shapeParam = __fieldsMap.get(scalaDescriptor.findFieldByNumber(56).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        shapeIcon = __fieldsMap.get(scalaDescriptor.findFieldByNumber(57).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        shapeTerrain = __fieldsMap.get(scalaDescriptor.findFieldByNumber(58).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        idleType = __fieldsMap.get(scalaDescriptor.findFieldByNumber(59).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        displacement = __fieldsMap.get(scalaDescriptor.findFieldByNumber(60).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        isHide = __fieldsMap.get(scalaDescriptor.findFieldByNumber(61).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        weakTag = __fieldsMap.get(scalaDescriptor.findFieldByNumber(62).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        suppressGroup = __fieldsMap.get(scalaDescriptor.findFieldByNumber(63).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        unlockHint = __fieldsMap.get(scalaDescriptor.findFieldByNumber(64).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        unlockDorm = __fieldsMap.get(scalaDescriptor.findFieldByNumber(65).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty),
        guardRadius = __fieldsMap.get(scalaDescriptor.findFieldByNumber(66).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        guardRadiusShow = __fieldsMap.get(scalaDescriptor.findFieldByNumber(67).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        gachaGetAudio = __fieldsMap.get(scalaDescriptor.findFieldByNumber(68).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        gachaGetVoice = __fieldsMap.get(scalaDescriptor.findFieldByNumber(69).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        weakWeaponTag = __fieldsMap.get(scalaDescriptor.findFieldByNumber(70).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = CharactersProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = CharactersProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = gfbot.decoder.language_string_data.LanguageStringData
      case 3 => __out = gfbot.decoder.language_string_data.LanguageStringData
      case 4 => __out = gfbot.decoder.language_string_data.LanguageStringData
      case 5 => __out = gfbot.decoder.language_string_data.LanguageStringData
      case 6 => __out = gfbot.decoder.language_string_data.LanguageStringData
      case 7 => __out = gfbot.decoder.language_string_data.LanguageStringData
      case 8 => __out = gfbot.decoder.language_string_data.LanguageStringData
      case 18 => __out = gfbot.decoder.language_string_data.LanguageStringData
      case 29 => __out = GunData.SoldGet1Entry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      GunData.SoldGet1Entry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = GunData(
    id = 0,
    name = _root_.scala.None,
    firstName = _root_.scala.None,
    secondName = _root_.scala.None,
    enName = _root_.scala.None,
    introduce = _root_.scala.None,
    dialogue = _root_.scala.None,
    extra = _root_.scala.None,
    code = "",
    `type` = 0,
    characterId = 0,
    getAudio = 0,
    duty = 0,
    secondDuty = 0,
    rank = 0,
    roleTemplateId = 0,
    coreItemId = 0,
    upgradeSpeech = _root_.scala.None,
    skillNormalAttack = 0,
    skillActiveExtra = _root_.scala.Seq.empty,
    skillTalentExtra = _root_.scala.Seq.empty,
    aiList = _root_.scala.Seq.empty,
    element = 0,
    weaponType = 0,
    weaponPrivate = _root_.scala.Seq.empty,
    weaponPrivateShow = _root_.scala.Seq.empty,
    weaponDefault = 0,
    moveCode = 0,
    soldGet1 = _root_.scala.collection.immutable.Map.empty,
    systemSwitch = 0,
    useFakeAttack = false,
    camp = 0,
    defaultGrade = 0,
    unlockCost = 0,
    grade = 0,
    gunClass = 0,
    barrackCameraSetting = "",
    avatar = 0,
    costumeId = 0,
    costumeReplace = _root_.scala.Seq.empty,
    propertyId = 0,
    barrackEffectId = _root_.scala.Seq.empty,
    weight = 0,
    barrackAudioId = 0,
    shieldType = 0,
    maxGrade = 0,
    shieldEffectId = 0,
    baseSupply = 0,
    supplyTypeBanList = _root_.scala.Seq.empty,
    extraSkill = 0,
    shieldBrokenEffectId = 0,
    attackType = 0,
    gachaGetTimeline = "",
    beSuppressedConfig = _root_.scala.Seq.empty,
    shape = 0,
    shapeParam = "",
    shapeIcon = "",
    shapeTerrain = 0,
    idleType = 0,
    displacement = 0,
    isHide = false,
    weakTag = "",
    suppressGroup = "",
    unlockHint = 0,
    unlockDorm = _root_.scala.Seq.empty,
    guardRadius = 0,
    guardRadiusShow = 0,
    gachaGetAudio = 0,
    gachaGetVoice = 0,
    weakWeaponTag = 0
  )
  @SerialVersionUID(0L)
  final case class SoldGet1Entry(
      key: _root_.scala.Int = 0,
      value: _root_.scala.Int = 0,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SoldGet1Entry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, __value)
          }
        };
        
        {
          val __value = value
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (__v != 0) {
            _output__.writeUInt32(1, __v)
          }
        };
        {
          val __v = value
          if (__v != 0) {
            _output__.writeUInt32(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Int): SoldGet1Entry = copy(key = __v)
      def withValue(__v: _root_.scala.Int): SoldGet1Entry = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != 0) __t else null
          }
          case 2 => {
            val __t = value
            if (__t != 0) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(key)
          case 2 => _root_.scalapb.descriptors.PInt(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: GunData.SoldGet1Entry.type = GunData.SoldGet1Entry
      // @@protoc_insertion_point(GeneratedMessage[GunData.SoldGet1Entry])
  }
  
  object SoldGet1Entry extends scalapb.GeneratedMessageCompanion[GunData.SoldGet1Entry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[GunData.SoldGet1Entry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): GunData.SoldGet1Entry = {
      var __key: _root_.scala.Int = 0
      var __value: _root_.scala.Int = 0
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __key = _input__.readUInt32()
          case 16 =>
            __value = _input__.readUInt32()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      GunData.SoldGet1Entry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[GunData.SoldGet1Entry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        GunData.SoldGet1Entry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = GunData.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = GunData.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = GunData.SoldGet1Entry(
      key = 0,
      value = 0
    )
    implicit class SoldGet1EntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, GunData.SoldGet1Entry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, GunData.SoldGet1Entry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[GunData.SoldGet1Entry, (_root_.scala.Int, _root_.scala.Int)] =
      _root_.scalapb.TypeMapper[GunData.SoldGet1Entry, (_root_.scala.Int, _root_.scala.Int)](__m => (__m.key, __m.value))(__p => GunData.SoldGet1Entry(__p._1, __p._2))
    def of(
      key: _root_.scala.Int,
      value: _root_.scala.Int
    ): GunData.SoldGet1Entry = GunData.SoldGet1Entry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[GunData.SoldGet1Entry])
  }
  
  implicit class GunDataLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, GunData]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, GunData](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def name: _root_.scalapb.lenses.Lens[UpperPB, gfbot.decoder.language_string_data.LanguageStringData] = field(_.getName)((c_, f_) => c_.copy(name = Option(f_)))
    def optionalName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData]] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def firstName: _root_.scalapb.lenses.Lens[UpperPB, gfbot.decoder.language_string_data.LanguageStringData] = field(_.getFirstName)((c_, f_) => c_.copy(firstName = Option(f_)))
    def optionalFirstName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData]] = field(_.firstName)((c_, f_) => c_.copy(firstName = f_))
    def secondName: _root_.scalapb.lenses.Lens[UpperPB, gfbot.decoder.language_string_data.LanguageStringData] = field(_.getSecondName)((c_, f_) => c_.copy(secondName = Option(f_)))
    def optionalSecondName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData]] = field(_.secondName)((c_, f_) => c_.copy(secondName = f_))
    def enName: _root_.scalapb.lenses.Lens[UpperPB, gfbot.decoder.language_string_data.LanguageStringData] = field(_.getEnName)((c_, f_) => c_.copy(enName = Option(f_)))
    def optionalEnName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData]] = field(_.enName)((c_, f_) => c_.copy(enName = f_))
    def introduce: _root_.scalapb.lenses.Lens[UpperPB, gfbot.decoder.language_string_data.LanguageStringData] = field(_.getIntroduce)((c_, f_) => c_.copy(introduce = Option(f_)))
    def optionalIntroduce: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData]] = field(_.introduce)((c_, f_) => c_.copy(introduce = f_))
    def dialogue: _root_.scalapb.lenses.Lens[UpperPB, gfbot.decoder.language_string_data.LanguageStringData] = field(_.getDialogue)((c_, f_) => c_.copy(dialogue = Option(f_)))
    def optionalDialogue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData]] = field(_.dialogue)((c_, f_) => c_.copy(dialogue = f_))
    def extra: _root_.scalapb.lenses.Lens[UpperPB, gfbot.decoder.language_string_data.LanguageStringData] = field(_.getExtra)((c_, f_) => c_.copy(extra = Option(f_)))
    def optionalExtra: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData]] = field(_.extra)((c_, f_) => c_.copy(extra = f_))
    def code: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.code)((c_, f_) => c_.copy(code = f_))
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def characterId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.characterId)((c_, f_) => c_.copy(characterId = f_))
    def getAudio: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getAudio)((c_, f_) => c_.copy(getAudio = f_))
    def duty: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.duty)((c_, f_) => c_.copy(duty = f_))
    def secondDuty: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.secondDuty)((c_, f_) => c_.copy(secondDuty = f_))
    def rank: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.rank)((c_, f_) => c_.copy(rank = f_))
    def roleTemplateId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.roleTemplateId)((c_, f_) => c_.copy(roleTemplateId = f_))
    def coreItemId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.coreItemId)((c_, f_) => c_.copy(coreItemId = f_))
    def upgradeSpeech: _root_.scalapb.lenses.Lens[UpperPB, gfbot.decoder.language_string_data.LanguageStringData] = field(_.getUpgradeSpeech)((c_, f_) => c_.copy(upgradeSpeech = Option(f_)))
    def optionalUpgradeSpeech: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData]] = field(_.upgradeSpeech)((c_, f_) => c_.copy(upgradeSpeech = f_))
    def skillNormalAttack: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.skillNormalAttack)((c_, f_) => c_.copy(skillNormalAttack = f_))
    def skillActiveExtra: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.skillActiveExtra)((c_, f_) => c_.copy(skillActiveExtra = f_))
    def skillTalentExtra: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.skillTalentExtra)((c_, f_) => c_.copy(skillTalentExtra = f_))
    def aiList: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.aiList)((c_, f_) => c_.copy(aiList = f_))
    def element: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.element)((c_, f_) => c_.copy(element = f_))
    def weaponType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.weaponType)((c_, f_) => c_.copy(weaponType = f_))
    def weaponPrivate: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.weaponPrivate)((c_, f_) => c_.copy(weaponPrivate = f_))
    def weaponPrivateShow: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.weaponPrivateShow)((c_, f_) => c_.copy(weaponPrivateShow = f_))
    def weaponDefault: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.weaponDefault)((c_, f_) => c_.copy(weaponDefault = f_))
    def moveCode: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.moveCode)((c_, f_) => c_.copy(moveCode = f_))
    def soldGet1: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Int]] = field(_.soldGet1)((c_, f_) => c_.copy(soldGet1 = f_))
    def systemSwitch: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.systemSwitch)((c_, f_) => c_.copy(systemSwitch = f_))
    def useFakeAttack: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.useFakeAttack)((c_, f_) => c_.copy(useFakeAttack = f_))
    def camp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.camp)((c_, f_) => c_.copy(camp = f_))
    def defaultGrade: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.defaultGrade)((c_, f_) => c_.copy(defaultGrade = f_))
    def unlockCost: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.unlockCost)((c_, f_) => c_.copy(unlockCost = f_))
    def grade: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.grade)((c_, f_) => c_.copy(grade = f_))
    def gunClass: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.gunClass)((c_, f_) => c_.copy(gunClass = f_))
    def barrackCameraSetting: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.barrackCameraSetting)((c_, f_) => c_.copy(barrackCameraSetting = f_))
    def avatar: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.avatar)((c_, f_) => c_.copy(avatar = f_))
    def costumeId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.costumeId)((c_, f_) => c_.copy(costumeId = f_))
    def costumeReplace: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.costumeReplace)((c_, f_) => c_.copy(costumeReplace = f_))
    def propertyId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.propertyId)((c_, f_) => c_.copy(propertyId = f_))
    def barrackEffectId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.barrackEffectId)((c_, f_) => c_.copy(barrackEffectId = f_))
    def weight: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.weight)((c_, f_) => c_.copy(weight = f_))
    def barrackAudioId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.barrackAudioId)((c_, f_) => c_.copy(barrackAudioId = f_))
    def shieldType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.shieldType)((c_, f_) => c_.copy(shieldType = f_))
    def maxGrade: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.maxGrade)((c_, f_) => c_.copy(maxGrade = f_))
    def shieldEffectId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.shieldEffectId)((c_, f_) => c_.copy(shieldEffectId = f_))
    def baseSupply: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.baseSupply)((c_, f_) => c_.copy(baseSupply = f_))
    def supplyTypeBanList: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.supplyTypeBanList)((c_, f_) => c_.copy(supplyTypeBanList = f_))
    def extraSkill: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.extraSkill)((c_, f_) => c_.copy(extraSkill = f_))
    def shieldBrokenEffectId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.shieldBrokenEffectId)((c_, f_) => c_.copy(shieldBrokenEffectId = f_))
    def attackType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.attackType)((c_, f_) => c_.copy(attackType = f_))
    def gachaGetTimeline: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.gachaGetTimeline)((c_, f_) => c_.copy(gachaGetTimeline = f_))
    def beSuppressedConfig: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.beSuppressedConfig)((c_, f_) => c_.copy(beSuppressedConfig = f_))
    def shape: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.shape)((c_, f_) => c_.copy(shape = f_))
    def shapeParam: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.shapeParam)((c_, f_) => c_.copy(shapeParam = f_))
    def shapeIcon: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.shapeIcon)((c_, f_) => c_.copy(shapeIcon = f_))
    def shapeTerrain: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.shapeTerrain)((c_, f_) => c_.copy(shapeTerrain = f_))
    def idleType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.idleType)((c_, f_) => c_.copy(idleType = f_))
    def displacement: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.displacement)((c_, f_) => c_.copy(displacement = f_))
    def isHide: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.isHide)((c_, f_) => c_.copy(isHide = f_))
    def weakTag: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.weakTag)((c_, f_) => c_.copy(weakTag = f_))
    def suppressGroup: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.suppressGroup)((c_, f_) => c_.copy(suppressGroup = f_))
    def unlockHint: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.unlockHint)((c_, f_) => c_.copy(unlockHint = f_))
    def unlockDorm: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.unlockDorm)((c_, f_) => c_.copy(unlockDorm = f_))
    def guardRadius: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.guardRadius)((c_, f_) => c_.copy(guardRadius = f_))
    def guardRadiusShow: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.guardRadiusShow)((c_, f_) => c_.copy(guardRadiusShow = f_))
    def gachaGetAudio: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.gachaGetAudio)((c_, f_) => c_.copy(gachaGetAudio = f_))
    def gachaGetVoice: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.gachaGetVoice)((c_, f_) => c_.copy(gachaGetVoice = f_))
    def weakWeaponTag: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.weakWeaponTag)((c_, f_) => c_.copy(weakWeaponTag = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val NAME_FIELD_NUMBER = 2
  final val FIRSTNAME_FIELD_NUMBER = 3
  final val SECONDNAME_FIELD_NUMBER = 4
  final val ENNAME_FIELD_NUMBER = 5
  final val INTRODUCE_FIELD_NUMBER = 6
  final val DIALOGUE_FIELD_NUMBER = 7
  final val EXTRA_FIELD_NUMBER = 8
  final val CODE_FIELD_NUMBER = 9
  final val TYPE_FIELD_NUMBER = 10
  final val CHARACTERID_FIELD_NUMBER = 11
  final val GETAUDIO_FIELD_NUMBER = 12
  final val DUTY_FIELD_NUMBER = 13
  final val SECONDDUTY_FIELD_NUMBER = 14
  final val RANK_FIELD_NUMBER = 15
  final val ROLETEMPLATEID_FIELD_NUMBER = 16
  final val COREITEMID_FIELD_NUMBER = 17
  final val UPGRADESPEECH_FIELD_NUMBER = 18
  final val SKILLNORMALATTACK_FIELD_NUMBER = 19
  final val SKILLACTIVEEXTRA_FIELD_NUMBER = 20
  final val SKILLTALENTEXTRA_FIELD_NUMBER = 21
  final val AILIST_FIELD_NUMBER = 22
  final val ELEMENT_FIELD_NUMBER = 23
  final val WEAPONTYPE_FIELD_NUMBER = 24
  final val WEAPONPRIVATE_FIELD_NUMBER = 25
  final val WEAPONPRIVATESHOW_FIELD_NUMBER = 26
  final val WEAPONDEFAULT_FIELD_NUMBER = 27
  final val MOVECODE_FIELD_NUMBER = 28
  final val SOLDGET1_FIELD_NUMBER = 29
  final val SYSTEMSWITCH_FIELD_NUMBER = 30
  final val USEFAKEATTACK_FIELD_NUMBER = 31
  final val CAMP_FIELD_NUMBER = 32
  final val DEFAULTGRADE_FIELD_NUMBER = 33
  final val UNLOCKCOST_FIELD_NUMBER = 34
  final val GRADE_FIELD_NUMBER = 35
  final val GUNCLASS_FIELD_NUMBER = 36
  final val BARRACKCAMERASETTING_FIELD_NUMBER = 37
  final val AVATAR_FIELD_NUMBER = 38
  final val COSTUMEID_FIELD_NUMBER = 39
  final val COSTUMEREPLACE_FIELD_NUMBER = 40
  final val PROPERTYID_FIELD_NUMBER = 41
  final val BARRACKEFFECTID_FIELD_NUMBER = 42
  final val WEIGHT_FIELD_NUMBER = 43
  final val BARRACKAUDIOID_FIELD_NUMBER = 44
  final val SHIELDTYPE_FIELD_NUMBER = 45
  final val MAXGRADE_FIELD_NUMBER = 46
  final val SHIELDEFFECTID_FIELD_NUMBER = 47
  final val BASESUPPLY_FIELD_NUMBER = 48
  final val SUPPLYTYPEBANLIST_FIELD_NUMBER = 49
  final val EXTRASKILL_FIELD_NUMBER = 50
  final val SHIELDBROKENEFFECTID_FIELD_NUMBER = 51
  final val ATTACKTYPE_FIELD_NUMBER = 52
  final val GACHAGETTIMELINE_FIELD_NUMBER = 53
  final val BESUPPRESSEDCONFIG_FIELD_NUMBER = 54
  final val SHAPE_FIELD_NUMBER = 55
  final val SHAPEPARAM_FIELD_NUMBER = 56
  final val SHAPEICON_FIELD_NUMBER = 57
  final val SHAPETERRAIN_FIELD_NUMBER = 58
  final val IDLETYPE_FIELD_NUMBER = 59
  final val DISPLACEMENT_FIELD_NUMBER = 60
  final val ISHIDE_FIELD_NUMBER = 61
  final val WEAKTAG_FIELD_NUMBER = 62
  final val SUPPRESSGROUP_FIELD_NUMBER = 63
  final val UNLOCKHINT_FIELD_NUMBER = 64
  final val UNLOCKDORM_FIELD_NUMBER = 65
  final val GUARDRADIUS_FIELD_NUMBER = 66
  final val GUARDRADIUSSHOW_FIELD_NUMBER = 67
  final val GACHAGETAUDIO_FIELD_NUMBER = 68
  final val GACHAGETVOICE_FIELD_NUMBER = 69
  final val WEAKWEAPONTAG_FIELD_NUMBER = 70
  @transient
  private[characters] val _typemapper_soldGet1: _root_.scalapb.TypeMapper[GunData.SoldGet1Entry, (_root_.scala.Int, _root_.scala.Int)] = implicitly[_root_.scalapb.TypeMapper[GunData.SoldGet1Entry, (_root_.scala.Int, _root_.scala.Int)]]
  def of(
    id: _root_.scala.Int,
    name: _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData],
    firstName: _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData],
    secondName: _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData],
    enName: _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData],
    introduce: _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData],
    dialogue: _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData],
    extra: _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData],
    code: _root_.scala.Predef.String,
    `type`: _root_.scala.Int,
    characterId: _root_.scala.Int,
    getAudio: _root_.scala.Int,
    duty: _root_.scala.Int,
    secondDuty: _root_.scala.Int,
    rank: _root_.scala.Int,
    roleTemplateId: _root_.scala.Int,
    coreItemId: _root_.scala.Int,
    upgradeSpeech: _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData],
    skillNormalAttack: _root_.scala.Int,
    skillActiveExtra: _root_.scala.Seq[_root_.scala.Int],
    skillTalentExtra: _root_.scala.Seq[_root_.scala.Int],
    aiList: _root_.scala.Seq[_root_.scala.Int],
    element: _root_.scala.Int,
    weaponType: _root_.scala.Int,
    weaponPrivate: _root_.scala.Seq[_root_.scala.Int],
    weaponPrivateShow: _root_.scala.Seq[_root_.scala.Int],
    weaponDefault: _root_.scala.Int,
    moveCode: _root_.scala.Int,
    soldGet1: _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Int],
    systemSwitch: _root_.scala.Int,
    useFakeAttack: _root_.scala.Boolean,
    camp: _root_.scala.Int,
    defaultGrade: _root_.scala.Int,
    unlockCost: _root_.scala.Int,
    grade: _root_.scala.Int,
    gunClass: _root_.scala.Int,
    barrackCameraSetting: _root_.scala.Predef.String,
    avatar: _root_.scala.Int,
    costumeId: _root_.scala.Int,
    costumeReplace: _root_.scala.Seq[_root_.scala.Int],
    propertyId: _root_.scala.Int,
    barrackEffectId: _root_.scala.Seq[_root_.scala.Int],
    weight: _root_.scala.Int,
    barrackAudioId: _root_.scala.Int,
    shieldType: _root_.scala.Int,
    maxGrade: _root_.scala.Int,
    shieldEffectId: _root_.scala.Int,
    baseSupply: _root_.scala.Int,
    supplyTypeBanList: _root_.scala.Seq[_root_.scala.Int],
    extraSkill: _root_.scala.Int,
    shieldBrokenEffectId: _root_.scala.Int,
    attackType: _root_.scala.Int,
    gachaGetTimeline: _root_.scala.Predef.String,
    beSuppressedConfig: _root_.scala.Seq[_root_.scala.Int],
    shape: _root_.scala.Int,
    shapeParam: _root_.scala.Predef.String,
    shapeIcon: _root_.scala.Predef.String,
    shapeTerrain: _root_.scala.Int,
    idleType: _root_.scala.Int,
    displacement: _root_.scala.Int,
    isHide: _root_.scala.Boolean,
    weakTag: _root_.scala.Predef.String,
    suppressGroup: _root_.scala.Predef.String,
    unlockHint: _root_.scala.Int,
    unlockDorm: _root_.scala.Seq[_root_.scala.Int],
    guardRadius: _root_.scala.Int,
    guardRadiusShow: _root_.scala.Int,
    gachaGetAudio: _root_.scala.Int,
    gachaGetVoice: _root_.scala.Int,
    weakWeaponTag: _root_.scala.Int
  ): GunData = GunData(
    id,
    name,
    firstName,
    secondName,
    enName,
    introduce,
    dialogue,
    extra,
    code,
    `type`,
    characterId,
    getAudio,
    duty,
    secondDuty,
    rank,
    roleTemplateId,
    coreItemId,
    upgradeSpeech,
    skillNormalAttack,
    skillActiveExtra,
    skillTalentExtra,
    aiList,
    element,
    weaponType,
    weaponPrivate,
    weaponPrivateShow,
    weaponDefault,
    moveCode,
    soldGet1,
    systemSwitch,
    useFakeAttack,
    camp,
    defaultGrade,
    unlockCost,
    grade,
    gunClass,
    barrackCameraSetting,
    avatar,
    costumeId,
    costumeReplace,
    propertyId,
    barrackEffectId,
    weight,
    barrackAudioId,
    shieldType,
    maxGrade,
    shieldEffectId,
    baseSupply,
    supplyTypeBanList,
    extraSkill,
    shieldBrokenEffectId,
    attackType,
    gachaGetTimeline,
    beSuppressedConfig,
    shape,
    shapeParam,
    shapeIcon,
    shapeTerrain,
    idleType,
    displacement,
    isHide,
    weakTag,
    suppressGroup,
    unlockHint,
    unlockDorm,
    guardRadius,
    guardRadiusShow,
    gachaGetAudio,
    gachaGetVoice,
    weakWeaponTag
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[GunData])
}
