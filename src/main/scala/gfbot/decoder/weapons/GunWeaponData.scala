// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package gfbot.decoder.weapons

@SerialVersionUID(0L)
final case class GunWeaponData(
    id: _root_.scala.Int = 0,
    name: _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData] = _root_.scala.None,
    description: _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData] = _root_.scala.None,
    `type`: _root_.scala.Int = 0,
    modelstype: _root_.scala.Int = 0,
    element: _root_.scala.Int = 0,
    resCode: _root_.scala.Predef.String = "",
    resPath: _root_.scala.Predef.String = "",
    brand: _root_.scala.Predef.String = "",
    rank: _root_.scala.Int = 0,
    elemenSkill: _root_.scala.Int = 0,
    skill: _root_.scala.Int = 0,
    buffSkill: _root_.scala.Int = 0,
    slot: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
    expRate: _root_.scala.Int = 0,
    weaponOfferExp: _root_.scala.Int = 0,
    weaponNeedCash: _root_.scala.Int = 0,
    defaultMaxlv: _root_.scala.Int = 0,
    maxBreak: _root_.scala.Int = 0,
    soldDrop: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
    soldGet: _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Int] = _root_.scala.collection.immutable.Map.empty,
    propertyId: _root_.scala.Int = 0,
    unlockCost: _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Int] = _root_.scala.collection.immutable.Map.empty,
    privateSkill: _root_.scala.Int = 0,
    capacityMax: _root_.scala.Int = 0,
    weaponPolarityId: _root_.scala.Int = 0,
    polarityCostRandom: _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Int] = _root_.scala.collection.immutable.Map.empty,
    polarityCostCustom: _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Int] = _root_.scala.collection.immutable.Map.empty,
    advanceWeapon: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
    characterId: _root_.scala.Int = 0,
    modNum: _root_.scala.Int = 0,
    modTypeGroup: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
    isHide: _root_.scala.Boolean = false,
    audio: _root_.scala.Int = 0,
    weaponTag: _root_.scala.Int = 0,
    attackType: _root_.scala.Int = 0,
    weaponSkill: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[GunWeaponData] {
    private[this] def slotSerializedSize = {
      if (__slotSerializedSizeField == 0) __slotSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        slot.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__i))
        __s
      }
      __slotSerializedSizeField
    }
    @transient private[this] var __slotSerializedSizeField: _root_.scala.Int = 0
    private[this] def soldDropSerializedSize = {
      if (__soldDropSerializedSizeField == 0) __soldDropSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        soldDrop.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__i))
        __s
      }
      __soldDropSerializedSizeField
    }
    @transient private[this] var __soldDropSerializedSizeField: _root_.scala.Int = 0
    private[this] def advanceWeaponSerializedSize = {
      if (__advanceWeaponSerializedSizeField == 0) __advanceWeaponSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        advanceWeapon.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__i))
        __s
      }
      __advanceWeaponSerializedSizeField
    }
    @transient private[this] var __advanceWeaponSerializedSizeField: _root_.scala.Int = 0
    private[this] def modTypeGroupSerializedSize = {
      if (__modTypeGroupSerializedSizeField == 0) __modTypeGroupSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        modTypeGroup.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__i))
        __s
      }
      __modTypeGroupSerializedSizeField
    }
    @transient private[this] var __modTypeGroupSerializedSizeField: _root_.scala.Int = 0
    private[this] def weaponSkillSerializedSize = {
      if (__weaponSkillSerializedSizeField == 0) __weaponSkillSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        weaponSkill.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__i))
        __s
      }
      __weaponSkillSerializedSizeField
    }
    @transient private[this] var __weaponSkillSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = id
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, __value)
        }
      };
      if (name.isDefined) {
        val __value = name.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (description.isDefined) {
        val __value = description.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = `type`
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(4, __value)
        }
      };
      
      {
        val __value = modelstype
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(5, __value)
        }
      };
      
      {
        val __value = element
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(6, __value)
        }
      };
      
      {
        val __value = resCode
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
        }
      };
      
      {
        val __value = resPath
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, __value)
        }
      };
      
      {
        val __value = brand
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, __value)
        }
      };
      
      {
        val __value = rank
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(10, __value)
        }
      };
      
      {
        val __value = elemenSkill
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(11, __value)
        }
      };
      
      {
        val __value = skill
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(12, __value)
        }
      };
      
      {
        val __value = buffSkill
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(13, __value)
        }
      };
      if (slot.nonEmpty) {
        val __localsize = slotSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      
      {
        val __value = expRate
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(15, __value)
        }
      };
      
      {
        val __value = weaponOfferExp
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(16, __value)
        }
      };
      
      {
        val __value = weaponNeedCash
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(17, __value)
        }
      };
      
      {
        val __value = defaultMaxlv
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(18, __value)
        }
      };
      
      {
        val __value = maxBreak
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(19, __value)
        }
      };
      if (soldDrop.nonEmpty) {
        val __localsize = soldDropSerializedSize
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      soldGet.foreach { __item =>
        val __value = GunWeaponData._typemapper_soldGet.toBase(__item)
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = propertyId
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(22, __value)
        }
      };
      unlockCost.foreach { __item =>
        val __value = GunWeaponData._typemapper_unlockCost.toBase(__item)
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = privateSkill
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(24, __value)
        }
      };
      
      {
        val __value = capacityMax
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(25, __value)
        }
      };
      
      {
        val __value = weaponPolarityId
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(26, __value)
        }
      };
      polarityCostRandom.foreach { __item =>
        val __value = GunWeaponData._typemapper_polarityCostRandom.toBase(__item)
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      polarityCostCustom.foreach { __item =>
        val __value = GunWeaponData._typemapper_polarityCostCustom.toBase(__item)
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (advanceWeapon.nonEmpty) {
        val __localsize = advanceWeaponSerializedSize
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      
      {
        val __value = characterId
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(30, __value)
        }
      };
      
      {
        val __value = modNum
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(31, __value)
        }
      };
      if (modTypeGroup.nonEmpty) {
        val __localsize = modTypeGroupSerializedSize
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      
      {
        val __value = isHide
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(33, __value)
        }
      };
      
      {
        val __value = audio
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(34, __value)
        }
      };
      
      {
        val __value = weaponTag
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(35, __value)
        }
      };
      
      {
        val __value = attackType
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(36, __value)
        }
      };
      if (weaponSkill.nonEmpty) {
        val __localsize = weaponSkillSerializedSize
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = id
        if (__v != 0) {
          _output__.writeUInt32(1, __v)
        }
      };
      name.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      description.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = `type`
        if (__v != 0) {
          _output__.writeUInt32(4, __v)
        }
      };
      {
        val __v = modelstype
        if (__v != 0) {
          _output__.writeUInt32(5, __v)
        }
      };
      {
        val __v = element
        if (__v != 0) {
          _output__.writeUInt32(6, __v)
        }
      };
      {
        val __v = resCode
        if (!__v.isEmpty) {
          _output__.writeString(7, __v)
        }
      };
      {
        val __v = resPath
        if (!__v.isEmpty) {
          _output__.writeString(8, __v)
        }
      };
      {
        val __v = brand
        if (!__v.isEmpty) {
          _output__.writeString(9, __v)
        }
      };
      {
        val __v = rank
        if (__v != 0) {
          _output__.writeInt32(10, __v)
        }
      };
      {
        val __v = elemenSkill
        if (__v != 0) {
          _output__.writeUInt32(11, __v)
        }
      };
      {
        val __v = skill
        if (__v != 0) {
          _output__.writeUInt32(12, __v)
        }
      };
      {
        val __v = buffSkill
        if (__v != 0) {
          _output__.writeUInt32(13, __v)
        }
      };
      if (slot.nonEmpty) {
        _output__.writeTag(14, 2)
        _output__.writeUInt32NoTag(slotSerializedSize)
        slot.foreach(_output__.writeUInt32NoTag)
      };
      {
        val __v = expRate
        if (__v != 0) {
          _output__.writeUInt32(15, __v)
        }
      };
      {
        val __v = weaponOfferExp
        if (__v != 0) {
          _output__.writeUInt32(16, __v)
        }
      };
      {
        val __v = weaponNeedCash
        if (__v != 0) {
          _output__.writeUInt32(17, __v)
        }
      };
      {
        val __v = defaultMaxlv
        if (__v != 0) {
          _output__.writeUInt32(18, __v)
        }
      };
      {
        val __v = maxBreak
        if (__v != 0) {
          _output__.writeUInt32(19, __v)
        }
      };
      if (soldDrop.nonEmpty) {
        _output__.writeTag(20, 2)
        _output__.writeUInt32NoTag(soldDropSerializedSize)
        soldDrop.foreach(_output__.writeUInt32NoTag)
      };
      soldGet.foreach { __v =>
        val __m = GunWeaponData._typemapper_soldGet.toBase(__v)
        _output__.writeTag(21, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = propertyId
        if (__v != 0) {
          _output__.writeUInt32(22, __v)
        }
      };
      unlockCost.foreach { __v =>
        val __m = GunWeaponData._typemapper_unlockCost.toBase(__v)
        _output__.writeTag(23, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = privateSkill
        if (__v != 0) {
          _output__.writeUInt32(24, __v)
        }
      };
      {
        val __v = capacityMax
        if (__v != 0) {
          _output__.writeUInt32(25, __v)
        }
      };
      {
        val __v = weaponPolarityId
        if (__v != 0) {
          _output__.writeUInt32(26, __v)
        }
      };
      polarityCostRandom.foreach { __v =>
        val __m = GunWeaponData._typemapper_polarityCostRandom.toBase(__v)
        _output__.writeTag(27, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      polarityCostCustom.foreach { __v =>
        val __m = GunWeaponData._typemapper_polarityCostCustom.toBase(__v)
        _output__.writeTag(28, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      if (advanceWeapon.nonEmpty) {
        _output__.writeTag(29, 2)
        _output__.writeUInt32NoTag(advanceWeaponSerializedSize)
        advanceWeapon.foreach(_output__.writeUInt32NoTag)
      };
      {
        val __v = characterId
        if (__v != 0) {
          _output__.writeUInt32(30, __v)
        }
      };
      {
        val __v = modNum
        if (__v != 0) {
          _output__.writeUInt32(31, __v)
        }
      };
      if (modTypeGroup.nonEmpty) {
        _output__.writeTag(32, 2)
        _output__.writeUInt32NoTag(modTypeGroupSerializedSize)
        modTypeGroup.foreach(_output__.writeUInt32NoTag)
      };
      {
        val __v = isHide
        if (__v != false) {
          _output__.writeBool(33, __v)
        }
      };
      {
        val __v = audio
        if (__v != 0) {
          _output__.writeUInt32(34, __v)
        }
      };
      {
        val __v = weaponTag
        if (__v != 0) {
          _output__.writeInt32(35, __v)
        }
      };
      {
        val __v = attackType
        if (__v != 0) {
          _output__.writeUInt32(36, __v)
        }
      };
      if (weaponSkill.nonEmpty) {
        _output__.writeTag(37, 2)
        _output__.writeUInt32NoTag(weaponSkillSerializedSize)
        weaponSkill.foreach(_output__.writeUInt32NoTag)
      };
      unknownFields.writeTo(_output__)
    }
    def withId(__v: _root_.scala.Int): GunWeaponData = copy(id = __v)
    def getName: gfbot.decoder.language_string_data.LanguageStringData = name.getOrElse(gfbot.decoder.language_string_data.LanguageStringData.defaultInstance)
    def clearName: GunWeaponData = copy(name = _root_.scala.None)
    def withName(__v: gfbot.decoder.language_string_data.LanguageStringData): GunWeaponData = copy(name = Option(__v))
    def getDescription: gfbot.decoder.language_string_data.LanguageStringData = description.getOrElse(gfbot.decoder.language_string_data.LanguageStringData.defaultInstance)
    def clearDescription: GunWeaponData = copy(description = _root_.scala.None)
    def withDescription(__v: gfbot.decoder.language_string_data.LanguageStringData): GunWeaponData = copy(description = Option(__v))
    def withType(__v: _root_.scala.Int): GunWeaponData = copy(`type` = __v)
    def withModelstype(__v: _root_.scala.Int): GunWeaponData = copy(modelstype = __v)
    def withElement(__v: _root_.scala.Int): GunWeaponData = copy(element = __v)
    def withResCode(__v: _root_.scala.Predef.String): GunWeaponData = copy(resCode = __v)
    def withResPath(__v: _root_.scala.Predef.String): GunWeaponData = copy(resPath = __v)
    def withBrand(__v: _root_.scala.Predef.String): GunWeaponData = copy(brand = __v)
    def withRank(__v: _root_.scala.Int): GunWeaponData = copy(rank = __v)
    def withElemenSkill(__v: _root_.scala.Int): GunWeaponData = copy(elemenSkill = __v)
    def withSkill(__v: _root_.scala.Int): GunWeaponData = copy(skill = __v)
    def withBuffSkill(__v: _root_.scala.Int): GunWeaponData = copy(buffSkill = __v)
    def clearSlot = copy(slot = _root_.scala.Seq.empty)
    def addSlot(__vs: _root_.scala.Int *): GunWeaponData = addAllSlot(__vs)
    def addAllSlot(__vs: Iterable[_root_.scala.Int]): GunWeaponData = copy(slot = slot ++ __vs)
    def withSlot(__v: _root_.scala.Seq[_root_.scala.Int]): GunWeaponData = copy(slot = __v)
    def withExpRate(__v: _root_.scala.Int): GunWeaponData = copy(expRate = __v)
    def withWeaponOfferExp(__v: _root_.scala.Int): GunWeaponData = copy(weaponOfferExp = __v)
    def withWeaponNeedCash(__v: _root_.scala.Int): GunWeaponData = copy(weaponNeedCash = __v)
    def withDefaultMaxlv(__v: _root_.scala.Int): GunWeaponData = copy(defaultMaxlv = __v)
    def withMaxBreak(__v: _root_.scala.Int): GunWeaponData = copy(maxBreak = __v)
    def clearSoldDrop = copy(soldDrop = _root_.scala.Seq.empty)
    def addSoldDrop(__vs: _root_.scala.Int *): GunWeaponData = addAllSoldDrop(__vs)
    def addAllSoldDrop(__vs: Iterable[_root_.scala.Int]): GunWeaponData = copy(soldDrop = soldDrop ++ __vs)
    def withSoldDrop(__v: _root_.scala.Seq[_root_.scala.Int]): GunWeaponData = copy(soldDrop = __v)
    def clearSoldGet = copy(soldGet = _root_.scala.collection.immutable.Map.empty)
    def addSoldGet(__vs: (_root_.scala.Int, _root_.scala.Int) *): GunWeaponData = addAllSoldGet(__vs)
    def addAllSoldGet(__vs: Iterable[(_root_.scala.Int, _root_.scala.Int)]): GunWeaponData = copy(soldGet = soldGet ++ __vs)
    def withSoldGet(__v: _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Int]): GunWeaponData = copy(soldGet = __v)
    def withPropertyId(__v: _root_.scala.Int): GunWeaponData = copy(propertyId = __v)
    def clearUnlockCost = copy(unlockCost = _root_.scala.collection.immutable.Map.empty)
    def addUnlockCost(__vs: (_root_.scala.Int, _root_.scala.Int) *): GunWeaponData = addAllUnlockCost(__vs)
    def addAllUnlockCost(__vs: Iterable[(_root_.scala.Int, _root_.scala.Int)]): GunWeaponData = copy(unlockCost = unlockCost ++ __vs)
    def withUnlockCost(__v: _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Int]): GunWeaponData = copy(unlockCost = __v)
    def withPrivateSkill(__v: _root_.scala.Int): GunWeaponData = copy(privateSkill = __v)
    def withCapacityMax(__v: _root_.scala.Int): GunWeaponData = copy(capacityMax = __v)
    def withWeaponPolarityId(__v: _root_.scala.Int): GunWeaponData = copy(weaponPolarityId = __v)
    def clearPolarityCostRandom = copy(polarityCostRandom = _root_.scala.collection.immutable.Map.empty)
    def addPolarityCostRandom(__vs: (_root_.scala.Int, _root_.scala.Int) *): GunWeaponData = addAllPolarityCostRandom(__vs)
    def addAllPolarityCostRandom(__vs: Iterable[(_root_.scala.Int, _root_.scala.Int)]): GunWeaponData = copy(polarityCostRandom = polarityCostRandom ++ __vs)
    def withPolarityCostRandom(__v: _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Int]): GunWeaponData = copy(polarityCostRandom = __v)
    def clearPolarityCostCustom = copy(polarityCostCustom = _root_.scala.collection.immutable.Map.empty)
    def addPolarityCostCustom(__vs: (_root_.scala.Int, _root_.scala.Int) *): GunWeaponData = addAllPolarityCostCustom(__vs)
    def addAllPolarityCostCustom(__vs: Iterable[(_root_.scala.Int, _root_.scala.Int)]): GunWeaponData = copy(polarityCostCustom = polarityCostCustom ++ __vs)
    def withPolarityCostCustom(__v: _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Int]): GunWeaponData = copy(polarityCostCustom = __v)
    def clearAdvanceWeapon = copy(advanceWeapon = _root_.scala.Seq.empty)
    def addAdvanceWeapon(__vs: _root_.scala.Int *): GunWeaponData = addAllAdvanceWeapon(__vs)
    def addAllAdvanceWeapon(__vs: Iterable[_root_.scala.Int]): GunWeaponData = copy(advanceWeapon = advanceWeapon ++ __vs)
    def withAdvanceWeapon(__v: _root_.scala.Seq[_root_.scala.Int]): GunWeaponData = copy(advanceWeapon = __v)
    def withCharacterId(__v: _root_.scala.Int): GunWeaponData = copy(characterId = __v)
    def withModNum(__v: _root_.scala.Int): GunWeaponData = copy(modNum = __v)
    def clearModTypeGroup = copy(modTypeGroup = _root_.scala.Seq.empty)
    def addModTypeGroup(__vs: _root_.scala.Int *): GunWeaponData = addAllModTypeGroup(__vs)
    def addAllModTypeGroup(__vs: Iterable[_root_.scala.Int]): GunWeaponData = copy(modTypeGroup = modTypeGroup ++ __vs)
    def withModTypeGroup(__v: _root_.scala.Seq[_root_.scala.Int]): GunWeaponData = copy(modTypeGroup = __v)
    def withIsHide(__v: _root_.scala.Boolean): GunWeaponData = copy(isHide = __v)
    def withAudio(__v: _root_.scala.Int): GunWeaponData = copy(audio = __v)
    def withWeaponTag(__v: _root_.scala.Int): GunWeaponData = copy(weaponTag = __v)
    def withAttackType(__v: _root_.scala.Int): GunWeaponData = copy(attackType = __v)
    def clearWeaponSkill = copy(weaponSkill = _root_.scala.Seq.empty)
    def addWeaponSkill(__vs: _root_.scala.Int *): GunWeaponData = addAllWeaponSkill(__vs)
    def addAllWeaponSkill(__vs: Iterable[_root_.scala.Int]): GunWeaponData = copy(weaponSkill = weaponSkill ++ __vs)
    def withWeaponSkill(__v: _root_.scala.Seq[_root_.scala.Int]): GunWeaponData = copy(weaponSkill = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = id
          if (__t != 0) __t else null
        }
        case 2 => name.orNull
        case 3 => description.orNull
        case 4 => {
          val __t = `type`
          if (__t != 0) __t else null
        }
        case 5 => {
          val __t = modelstype
          if (__t != 0) __t else null
        }
        case 6 => {
          val __t = element
          if (__t != 0) __t else null
        }
        case 7 => {
          val __t = resCode
          if (__t != "") __t else null
        }
        case 8 => {
          val __t = resPath
          if (__t != "") __t else null
        }
        case 9 => {
          val __t = brand
          if (__t != "") __t else null
        }
        case 10 => {
          val __t = rank
          if (__t != 0) __t else null
        }
        case 11 => {
          val __t = elemenSkill
          if (__t != 0) __t else null
        }
        case 12 => {
          val __t = skill
          if (__t != 0) __t else null
        }
        case 13 => {
          val __t = buffSkill
          if (__t != 0) __t else null
        }
        case 14 => slot
        case 15 => {
          val __t = expRate
          if (__t != 0) __t else null
        }
        case 16 => {
          val __t = weaponOfferExp
          if (__t != 0) __t else null
        }
        case 17 => {
          val __t = weaponNeedCash
          if (__t != 0) __t else null
        }
        case 18 => {
          val __t = defaultMaxlv
          if (__t != 0) __t else null
        }
        case 19 => {
          val __t = maxBreak
          if (__t != 0) __t else null
        }
        case 20 => soldDrop
        case 21 => soldGet.iterator.map(GunWeaponData._typemapper_soldGet.toBase(_)).toSeq
        case 22 => {
          val __t = propertyId
          if (__t != 0) __t else null
        }
        case 23 => unlockCost.iterator.map(GunWeaponData._typemapper_unlockCost.toBase(_)).toSeq
        case 24 => {
          val __t = privateSkill
          if (__t != 0) __t else null
        }
        case 25 => {
          val __t = capacityMax
          if (__t != 0) __t else null
        }
        case 26 => {
          val __t = weaponPolarityId
          if (__t != 0) __t else null
        }
        case 27 => polarityCostRandom.iterator.map(GunWeaponData._typemapper_polarityCostRandom.toBase(_)).toSeq
        case 28 => polarityCostCustom.iterator.map(GunWeaponData._typemapper_polarityCostCustom.toBase(_)).toSeq
        case 29 => advanceWeapon
        case 30 => {
          val __t = characterId
          if (__t != 0) __t else null
        }
        case 31 => {
          val __t = modNum
          if (__t != 0) __t else null
        }
        case 32 => modTypeGroup
        case 33 => {
          val __t = isHide
          if (__t != false) __t else null
        }
        case 34 => {
          val __t = audio
          if (__t != 0) __t else null
        }
        case 35 => {
          val __t = weaponTag
          if (__t != 0) __t else null
        }
        case 36 => {
          val __t = attackType
          if (__t != 0) __t else null
        }
        case 37 => weaponSkill
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(id)
        case 2 => name.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => description.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => _root_.scalapb.descriptors.PInt(`type`)
        case 5 => _root_.scalapb.descriptors.PInt(modelstype)
        case 6 => _root_.scalapb.descriptors.PInt(element)
        case 7 => _root_.scalapb.descriptors.PString(resCode)
        case 8 => _root_.scalapb.descriptors.PString(resPath)
        case 9 => _root_.scalapb.descriptors.PString(brand)
        case 10 => _root_.scalapb.descriptors.PInt(rank)
        case 11 => _root_.scalapb.descriptors.PInt(elemenSkill)
        case 12 => _root_.scalapb.descriptors.PInt(skill)
        case 13 => _root_.scalapb.descriptors.PInt(buffSkill)
        case 14 => _root_.scalapb.descriptors.PRepeated(slot.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
        case 15 => _root_.scalapb.descriptors.PInt(expRate)
        case 16 => _root_.scalapb.descriptors.PInt(weaponOfferExp)
        case 17 => _root_.scalapb.descriptors.PInt(weaponNeedCash)
        case 18 => _root_.scalapb.descriptors.PInt(defaultMaxlv)
        case 19 => _root_.scalapb.descriptors.PInt(maxBreak)
        case 20 => _root_.scalapb.descriptors.PRepeated(soldDrop.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
        case 21 => _root_.scalapb.descriptors.PRepeated(soldGet.iterator.map(GunWeaponData._typemapper_soldGet.toBase(_).toPMessage).toVector)
        case 22 => _root_.scalapb.descriptors.PInt(propertyId)
        case 23 => _root_.scalapb.descriptors.PRepeated(unlockCost.iterator.map(GunWeaponData._typemapper_unlockCost.toBase(_).toPMessage).toVector)
        case 24 => _root_.scalapb.descriptors.PInt(privateSkill)
        case 25 => _root_.scalapb.descriptors.PInt(capacityMax)
        case 26 => _root_.scalapb.descriptors.PInt(weaponPolarityId)
        case 27 => _root_.scalapb.descriptors.PRepeated(polarityCostRandom.iterator.map(GunWeaponData._typemapper_polarityCostRandom.toBase(_).toPMessage).toVector)
        case 28 => _root_.scalapb.descriptors.PRepeated(polarityCostCustom.iterator.map(GunWeaponData._typemapper_polarityCostCustom.toBase(_).toPMessage).toVector)
        case 29 => _root_.scalapb.descriptors.PRepeated(advanceWeapon.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
        case 30 => _root_.scalapb.descriptors.PInt(characterId)
        case 31 => _root_.scalapb.descriptors.PInt(modNum)
        case 32 => _root_.scalapb.descriptors.PRepeated(modTypeGroup.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
        case 33 => _root_.scalapb.descriptors.PBoolean(isHide)
        case 34 => _root_.scalapb.descriptors.PInt(audio)
        case 35 => _root_.scalapb.descriptors.PInt(weaponTag)
        case 36 => _root_.scalapb.descriptors.PInt(attackType)
        case 37 => _root_.scalapb.descriptors.PRepeated(weaponSkill.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: GunWeaponData.type = GunWeaponData
    // @@protoc_insertion_point(GeneratedMessage[GunWeaponData])
}

object GunWeaponData extends scalapb.GeneratedMessageCompanion[GunWeaponData] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[GunWeaponData] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): GunWeaponData = {
    var __id: _root_.scala.Int = 0
    var __name: _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData] = _root_.scala.None
    var __description: _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData] = _root_.scala.None
    var __type: _root_.scala.Int = 0
    var __modelstype: _root_.scala.Int = 0
    var __element: _root_.scala.Int = 0
    var __resCode: _root_.scala.Predef.String = ""
    var __resPath: _root_.scala.Predef.String = ""
    var __brand: _root_.scala.Predef.String = ""
    var __rank: _root_.scala.Int = 0
    var __elemenSkill: _root_.scala.Int = 0
    var __skill: _root_.scala.Int = 0
    var __buffSkill: _root_.scala.Int = 0
    val __slot: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int]
    var __expRate: _root_.scala.Int = 0
    var __weaponOfferExp: _root_.scala.Int = 0
    var __weaponNeedCash: _root_.scala.Int = 0
    var __defaultMaxlv: _root_.scala.Int = 0
    var __maxBreak: _root_.scala.Int = 0
    val __soldDrop: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int]
    val __soldGet: _root_.scala.collection.mutable.Builder[(_root_.scala.Int, _root_.scala.Int), _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Int]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Int, _root_.scala.Int]
    var __propertyId: _root_.scala.Int = 0
    val __unlockCost: _root_.scala.collection.mutable.Builder[(_root_.scala.Int, _root_.scala.Int), _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Int]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Int, _root_.scala.Int]
    var __privateSkill: _root_.scala.Int = 0
    var __capacityMax: _root_.scala.Int = 0
    var __weaponPolarityId: _root_.scala.Int = 0
    val __polarityCostRandom: _root_.scala.collection.mutable.Builder[(_root_.scala.Int, _root_.scala.Int), _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Int]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Int, _root_.scala.Int]
    val __polarityCostCustom: _root_.scala.collection.mutable.Builder[(_root_.scala.Int, _root_.scala.Int), _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Int]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Int, _root_.scala.Int]
    val __advanceWeapon: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int]
    var __characterId: _root_.scala.Int = 0
    var __modNum: _root_.scala.Int = 0
    val __modTypeGroup: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int]
    var __isHide: _root_.scala.Boolean = false
    var __audio: _root_.scala.Int = 0
    var __weaponTag: _root_.scala.Int = 0
    var __attackType: _root_.scala.Int = 0
    val __weaponSkill: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __id = _input__.readUInt32()
        case 18 =>
          __name = Option(__name.fold(_root_.scalapb.LiteParser.readMessage[gfbot.decoder.language_string_data.LanguageStringData](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __description = Option(__description.fold(_root_.scalapb.LiteParser.readMessage[gfbot.decoder.language_string_data.LanguageStringData](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 32 =>
          __type = _input__.readUInt32()
        case 40 =>
          __modelstype = _input__.readUInt32()
        case 48 =>
          __element = _input__.readUInt32()
        case 58 =>
          __resCode = _input__.readStringRequireUtf8()
        case 66 =>
          __resPath = _input__.readStringRequireUtf8()
        case 74 =>
          __brand = _input__.readStringRequireUtf8()
        case 80 =>
          __rank = _input__.readInt32()
        case 88 =>
          __elemenSkill = _input__.readUInt32()
        case 96 =>
          __skill = _input__.readUInt32()
        case 104 =>
          __buffSkill = _input__.readUInt32()
        case 112 =>
          __slot += _input__.readUInt32()
        case 114 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __slot += _input__.readUInt32()
          }
          _input__.popLimit(oldLimit)
        }
        case 120 =>
          __expRate = _input__.readUInt32()
        case 128 =>
          __weaponOfferExp = _input__.readUInt32()
        case 136 =>
          __weaponNeedCash = _input__.readUInt32()
        case 144 =>
          __defaultMaxlv = _input__.readUInt32()
        case 152 =>
          __maxBreak = _input__.readUInt32()
        case 160 =>
          __soldDrop += _input__.readUInt32()
        case 162 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __soldDrop += _input__.readUInt32()
          }
          _input__.popLimit(oldLimit)
        }
        case 170 =>
          __soldGet += GunWeaponData._typemapper_soldGet.toCustom(_root_.scalapb.LiteParser.readMessage[GunWeaponData.SoldGetEntry](_input__))
        case 176 =>
          __propertyId = _input__.readUInt32()
        case 186 =>
          __unlockCost += GunWeaponData._typemapper_unlockCost.toCustom(_root_.scalapb.LiteParser.readMessage[GunWeaponData.UnlockCostEntry](_input__))
        case 192 =>
          __privateSkill = _input__.readUInt32()
        case 200 =>
          __capacityMax = _input__.readUInt32()
        case 208 =>
          __weaponPolarityId = _input__.readUInt32()
        case 218 =>
          __polarityCostRandom += GunWeaponData._typemapper_polarityCostRandom.toCustom(_root_.scalapb.LiteParser.readMessage[GunWeaponData.PolarityCostRandomEntry](_input__))
        case 226 =>
          __polarityCostCustom += GunWeaponData._typemapper_polarityCostCustom.toCustom(_root_.scalapb.LiteParser.readMessage[GunWeaponData.PolarityCostCustomEntry](_input__))
        case 232 =>
          __advanceWeapon += _input__.readUInt32()
        case 234 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __advanceWeapon += _input__.readUInt32()
          }
          _input__.popLimit(oldLimit)
        }
        case 240 =>
          __characterId = _input__.readUInt32()
        case 248 =>
          __modNum = _input__.readUInt32()
        case 256 =>
          __modTypeGroup += _input__.readUInt32()
        case 258 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __modTypeGroup += _input__.readUInt32()
          }
          _input__.popLimit(oldLimit)
        }
        case 264 =>
          __isHide = _input__.readBool()
        case 272 =>
          __audio = _input__.readUInt32()
        case 280 =>
          __weaponTag = _input__.readInt32()
        case 288 =>
          __attackType = _input__.readUInt32()
        case 296 =>
          __weaponSkill += _input__.readUInt32()
        case 298 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __weaponSkill += _input__.readUInt32()
          }
          _input__.popLimit(oldLimit)
        }
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    GunWeaponData(
        id = __id,
        name = __name,
        description = __description,
        `type` = __type,
        modelstype = __modelstype,
        element = __element,
        resCode = __resCode,
        resPath = __resPath,
        brand = __brand,
        rank = __rank,
        elemenSkill = __elemenSkill,
        skill = __skill,
        buffSkill = __buffSkill,
        slot = __slot.result(),
        expRate = __expRate,
        weaponOfferExp = __weaponOfferExp,
        weaponNeedCash = __weaponNeedCash,
        defaultMaxlv = __defaultMaxlv,
        maxBreak = __maxBreak,
        soldDrop = __soldDrop.result(),
        soldGet = __soldGet.result(),
        propertyId = __propertyId,
        unlockCost = __unlockCost.result(),
        privateSkill = __privateSkill,
        capacityMax = __capacityMax,
        weaponPolarityId = __weaponPolarityId,
        polarityCostRandom = __polarityCostRandom.result(),
        polarityCostCustom = __polarityCostCustom.result(),
        advanceWeapon = __advanceWeapon.result(),
        characterId = __characterId,
        modNum = __modNum,
        modTypeGroup = __modTypeGroup.result(),
        isHide = __isHide,
        audio = __audio,
        weaponTag = __weaponTag,
        attackType = __attackType,
        weaponSkill = __weaponSkill.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[GunWeaponData] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      GunWeaponData(
        id = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData]]),
        description = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData]]),
        `type` = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        modelstype = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        element = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        resCode = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        resPath = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        brand = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        rank = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        elemenSkill = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        skill = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        buffSkill = __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        slot = __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty),
        expRate = __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        weaponOfferExp = __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        weaponNeedCash = __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        defaultMaxlv = __fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        maxBreak = __fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        soldDrop = __fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty),
        soldGet = __fieldsMap.get(scalaDescriptor.findFieldByNumber(21).get).map(_.as[_root_.scala.Seq[GunWeaponData.SoldGetEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(GunWeaponData._typemapper_soldGet.toCustom(_)).toMap,
        propertyId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(22).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        unlockCost = __fieldsMap.get(scalaDescriptor.findFieldByNumber(23).get).map(_.as[_root_.scala.Seq[GunWeaponData.UnlockCostEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(GunWeaponData._typemapper_unlockCost.toCustom(_)).toMap,
        privateSkill = __fieldsMap.get(scalaDescriptor.findFieldByNumber(24).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        capacityMax = __fieldsMap.get(scalaDescriptor.findFieldByNumber(25).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        weaponPolarityId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(26).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        polarityCostRandom = __fieldsMap.get(scalaDescriptor.findFieldByNumber(27).get).map(_.as[_root_.scala.Seq[GunWeaponData.PolarityCostRandomEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(GunWeaponData._typemapper_polarityCostRandom.toCustom(_)).toMap,
        polarityCostCustom = __fieldsMap.get(scalaDescriptor.findFieldByNumber(28).get).map(_.as[_root_.scala.Seq[GunWeaponData.PolarityCostCustomEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(GunWeaponData._typemapper_polarityCostCustom.toCustom(_)).toMap,
        advanceWeapon = __fieldsMap.get(scalaDescriptor.findFieldByNumber(29).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty),
        characterId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(30).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        modNum = __fieldsMap.get(scalaDescriptor.findFieldByNumber(31).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        modTypeGroup = __fieldsMap.get(scalaDescriptor.findFieldByNumber(32).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty),
        isHide = __fieldsMap.get(scalaDescriptor.findFieldByNumber(33).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        audio = __fieldsMap.get(scalaDescriptor.findFieldByNumber(34).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        weaponTag = __fieldsMap.get(scalaDescriptor.findFieldByNumber(35).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        attackType = __fieldsMap.get(scalaDescriptor.findFieldByNumber(36).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        weaponSkill = __fieldsMap.get(scalaDescriptor.findFieldByNumber(37).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = WeaponsProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = WeaponsProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = gfbot.decoder.language_string_data.LanguageStringData
      case 3 => __out = gfbot.decoder.language_string_data.LanguageStringData
      case 21 => __out = GunWeaponData.SoldGetEntry
      case 23 => __out = GunWeaponData.UnlockCostEntry
      case 27 => __out = GunWeaponData.PolarityCostRandomEntry
      case 28 => __out = GunWeaponData.PolarityCostCustomEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      GunWeaponData.SoldGetEntry,
      GunWeaponData.UnlockCostEntry,
      GunWeaponData.PolarityCostRandomEntry,
      GunWeaponData.PolarityCostCustomEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = GunWeaponData(
    id = 0,
    name = _root_.scala.None,
    description = _root_.scala.None,
    `type` = 0,
    modelstype = 0,
    element = 0,
    resCode = "",
    resPath = "",
    brand = "",
    rank = 0,
    elemenSkill = 0,
    skill = 0,
    buffSkill = 0,
    slot = _root_.scala.Seq.empty,
    expRate = 0,
    weaponOfferExp = 0,
    weaponNeedCash = 0,
    defaultMaxlv = 0,
    maxBreak = 0,
    soldDrop = _root_.scala.Seq.empty,
    soldGet = _root_.scala.collection.immutable.Map.empty,
    propertyId = 0,
    unlockCost = _root_.scala.collection.immutable.Map.empty,
    privateSkill = 0,
    capacityMax = 0,
    weaponPolarityId = 0,
    polarityCostRandom = _root_.scala.collection.immutable.Map.empty,
    polarityCostCustom = _root_.scala.collection.immutable.Map.empty,
    advanceWeapon = _root_.scala.Seq.empty,
    characterId = 0,
    modNum = 0,
    modTypeGroup = _root_.scala.Seq.empty,
    isHide = false,
    audio = 0,
    weaponTag = 0,
    attackType = 0,
    weaponSkill = _root_.scala.Seq.empty
  )
  @SerialVersionUID(0L)
  final case class SoldGetEntry(
      key: _root_.scala.Int = 0,
      value: _root_.scala.Int = 0,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SoldGetEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, __value)
          }
        };
        
        {
          val __value = value
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (__v != 0) {
            _output__.writeUInt32(1, __v)
          }
        };
        {
          val __v = value
          if (__v != 0) {
            _output__.writeUInt32(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Int): SoldGetEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Int): SoldGetEntry = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != 0) __t else null
          }
          case 2 => {
            val __t = value
            if (__t != 0) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(key)
          case 2 => _root_.scalapb.descriptors.PInt(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: GunWeaponData.SoldGetEntry.type = GunWeaponData.SoldGetEntry
      // @@protoc_insertion_point(GeneratedMessage[GunWeaponData.SoldGetEntry])
  }
  
  object SoldGetEntry extends scalapb.GeneratedMessageCompanion[GunWeaponData.SoldGetEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[GunWeaponData.SoldGetEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): GunWeaponData.SoldGetEntry = {
      var __key: _root_.scala.Int = 0
      var __value: _root_.scala.Int = 0
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __key = _input__.readUInt32()
          case 16 =>
            __value = _input__.readUInt32()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      GunWeaponData.SoldGetEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[GunWeaponData.SoldGetEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        GunWeaponData.SoldGetEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = GunWeaponData.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = GunWeaponData.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = GunWeaponData.SoldGetEntry(
      key = 0,
      value = 0
    )
    implicit class SoldGetEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, GunWeaponData.SoldGetEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, GunWeaponData.SoldGetEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[GunWeaponData.SoldGetEntry, (_root_.scala.Int, _root_.scala.Int)] =
      _root_.scalapb.TypeMapper[GunWeaponData.SoldGetEntry, (_root_.scala.Int, _root_.scala.Int)](__m => (__m.key, __m.value))(__p => GunWeaponData.SoldGetEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Int,
      value: _root_.scala.Int
    ): GunWeaponData.SoldGetEntry = GunWeaponData.SoldGetEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[GunWeaponData.SoldGetEntry])
  }
  
  @SerialVersionUID(0L)
  final case class UnlockCostEntry(
      key: _root_.scala.Int = 0,
      value: _root_.scala.Int = 0,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UnlockCostEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, __value)
          }
        };
        
        {
          val __value = value
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (__v != 0) {
            _output__.writeUInt32(1, __v)
          }
        };
        {
          val __v = value
          if (__v != 0) {
            _output__.writeUInt32(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Int): UnlockCostEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Int): UnlockCostEntry = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != 0) __t else null
          }
          case 2 => {
            val __t = value
            if (__t != 0) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(key)
          case 2 => _root_.scalapb.descriptors.PInt(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: GunWeaponData.UnlockCostEntry.type = GunWeaponData.UnlockCostEntry
      // @@protoc_insertion_point(GeneratedMessage[GunWeaponData.UnlockCostEntry])
  }
  
  object UnlockCostEntry extends scalapb.GeneratedMessageCompanion[GunWeaponData.UnlockCostEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[GunWeaponData.UnlockCostEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): GunWeaponData.UnlockCostEntry = {
      var __key: _root_.scala.Int = 0
      var __value: _root_.scala.Int = 0
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __key = _input__.readUInt32()
          case 16 =>
            __value = _input__.readUInt32()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      GunWeaponData.UnlockCostEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[GunWeaponData.UnlockCostEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        GunWeaponData.UnlockCostEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = GunWeaponData.javaDescriptor.getNestedTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = GunWeaponData.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = GunWeaponData.UnlockCostEntry(
      key = 0,
      value = 0
    )
    implicit class UnlockCostEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, GunWeaponData.UnlockCostEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, GunWeaponData.UnlockCostEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[GunWeaponData.UnlockCostEntry, (_root_.scala.Int, _root_.scala.Int)] =
      _root_.scalapb.TypeMapper[GunWeaponData.UnlockCostEntry, (_root_.scala.Int, _root_.scala.Int)](__m => (__m.key, __m.value))(__p => GunWeaponData.UnlockCostEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Int,
      value: _root_.scala.Int
    ): GunWeaponData.UnlockCostEntry = GunWeaponData.UnlockCostEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[GunWeaponData.UnlockCostEntry])
  }
  
  @SerialVersionUID(0L)
  final case class PolarityCostRandomEntry(
      key: _root_.scala.Int = 0,
      value: _root_.scala.Int = 0,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[PolarityCostRandomEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, __value)
          }
        };
        
        {
          val __value = value
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (__v != 0) {
            _output__.writeUInt32(1, __v)
          }
        };
        {
          val __v = value
          if (__v != 0) {
            _output__.writeUInt32(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Int): PolarityCostRandomEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Int): PolarityCostRandomEntry = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != 0) __t else null
          }
          case 2 => {
            val __t = value
            if (__t != 0) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(key)
          case 2 => _root_.scalapb.descriptors.PInt(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: GunWeaponData.PolarityCostRandomEntry.type = GunWeaponData.PolarityCostRandomEntry
      // @@protoc_insertion_point(GeneratedMessage[GunWeaponData.PolarityCostRandomEntry])
  }
  
  object PolarityCostRandomEntry extends scalapb.GeneratedMessageCompanion[GunWeaponData.PolarityCostRandomEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[GunWeaponData.PolarityCostRandomEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): GunWeaponData.PolarityCostRandomEntry = {
      var __key: _root_.scala.Int = 0
      var __value: _root_.scala.Int = 0
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __key = _input__.readUInt32()
          case 16 =>
            __value = _input__.readUInt32()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      GunWeaponData.PolarityCostRandomEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[GunWeaponData.PolarityCostRandomEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        GunWeaponData.PolarityCostRandomEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = GunWeaponData.javaDescriptor.getNestedTypes().get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = GunWeaponData.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = GunWeaponData.PolarityCostRandomEntry(
      key = 0,
      value = 0
    )
    implicit class PolarityCostRandomEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, GunWeaponData.PolarityCostRandomEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, GunWeaponData.PolarityCostRandomEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[GunWeaponData.PolarityCostRandomEntry, (_root_.scala.Int, _root_.scala.Int)] =
      _root_.scalapb.TypeMapper[GunWeaponData.PolarityCostRandomEntry, (_root_.scala.Int, _root_.scala.Int)](__m => (__m.key, __m.value))(__p => GunWeaponData.PolarityCostRandomEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Int,
      value: _root_.scala.Int
    ): GunWeaponData.PolarityCostRandomEntry = GunWeaponData.PolarityCostRandomEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[GunWeaponData.PolarityCostRandomEntry])
  }
  
  @SerialVersionUID(0L)
  final case class PolarityCostCustomEntry(
      key: _root_.scala.Int = 0,
      value: _root_.scala.Int = 0,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[PolarityCostCustomEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, __value)
          }
        };
        
        {
          val __value = value
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (__v != 0) {
            _output__.writeUInt32(1, __v)
          }
        };
        {
          val __v = value
          if (__v != 0) {
            _output__.writeUInt32(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Int): PolarityCostCustomEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Int): PolarityCostCustomEntry = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != 0) __t else null
          }
          case 2 => {
            val __t = value
            if (__t != 0) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(key)
          case 2 => _root_.scalapb.descriptors.PInt(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: GunWeaponData.PolarityCostCustomEntry.type = GunWeaponData.PolarityCostCustomEntry
      // @@protoc_insertion_point(GeneratedMessage[GunWeaponData.PolarityCostCustomEntry])
  }
  
  object PolarityCostCustomEntry extends scalapb.GeneratedMessageCompanion[GunWeaponData.PolarityCostCustomEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[GunWeaponData.PolarityCostCustomEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): GunWeaponData.PolarityCostCustomEntry = {
      var __key: _root_.scala.Int = 0
      var __value: _root_.scala.Int = 0
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __key = _input__.readUInt32()
          case 16 =>
            __value = _input__.readUInt32()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      GunWeaponData.PolarityCostCustomEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[GunWeaponData.PolarityCostCustomEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        GunWeaponData.PolarityCostCustomEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = GunWeaponData.javaDescriptor.getNestedTypes().get(3)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = GunWeaponData.scalaDescriptor.nestedMessages(3)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = GunWeaponData.PolarityCostCustomEntry(
      key = 0,
      value = 0
    )
    implicit class PolarityCostCustomEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, GunWeaponData.PolarityCostCustomEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, GunWeaponData.PolarityCostCustomEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[GunWeaponData.PolarityCostCustomEntry, (_root_.scala.Int, _root_.scala.Int)] =
      _root_.scalapb.TypeMapper[GunWeaponData.PolarityCostCustomEntry, (_root_.scala.Int, _root_.scala.Int)](__m => (__m.key, __m.value))(__p => GunWeaponData.PolarityCostCustomEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Int,
      value: _root_.scala.Int
    ): GunWeaponData.PolarityCostCustomEntry = GunWeaponData.PolarityCostCustomEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[GunWeaponData.PolarityCostCustomEntry])
  }
  
  implicit class GunWeaponDataLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, GunWeaponData]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, GunWeaponData](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def name: _root_.scalapb.lenses.Lens[UpperPB, gfbot.decoder.language_string_data.LanguageStringData] = field(_.getName)((c_, f_) => c_.copy(name = Option(f_)))
    def optionalName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData]] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def description: _root_.scalapb.lenses.Lens[UpperPB, gfbot.decoder.language_string_data.LanguageStringData] = field(_.getDescription)((c_, f_) => c_.copy(description = Option(f_)))
    def optionalDescription: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData]] = field(_.description)((c_, f_) => c_.copy(description = f_))
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def modelstype: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.modelstype)((c_, f_) => c_.copy(modelstype = f_))
    def element: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.element)((c_, f_) => c_.copy(element = f_))
    def resCode: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.resCode)((c_, f_) => c_.copy(resCode = f_))
    def resPath: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.resPath)((c_, f_) => c_.copy(resPath = f_))
    def brand: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.brand)((c_, f_) => c_.copy(brand = f_))
    def rank: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.rank)((c_, f_) => c_.copy(rank = f_))
    def elemenSkill: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.elemenSkill)((c_, f_) => c_.copy(elemenSkill = f_))
    def skill: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.skill)((c_, f_) => c_.copy(skill = f_))
    def buffSkill: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.buffSkill)((c_, f_) => c_.copy(buffSkill = f_))
    def slot: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.slot)((c_, f_) => c_.copy(slot = f_))
    def expRate: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.expRate)((c_, f_) => c_.copy(expRate = f_))
    def weaponOfferExp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.weaponOfferExp)((c_, f_) => c_.copy(weaponOfferExp = f_))
    def weaponNeedCash: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.weaponNeedCash)((c_, f_) => c_.copy(weaponNeedCash = f_))
    def defaultMaxlv: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.defaultMaxlv)((c_, f_) => c_.copy(defaultMaxlv = f_))
    def maxBreak: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.maxBreak)((c_, f_) => c_.copy(maxBreak = f_))
    def soldDrop: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.soldDrop)((c_, f_) => c_.copy(soldDrop = f_))
    def soldGet: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Int]] = field(_.soldGet)((c_, f_) => c_.copy(soldGet = f_))
    def propertyId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.propertyId)((c_, f_) => c_.copy(propertyId = f_))
    def unlockCost: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Int]] = field(_.unlockCost)((c_, f_) => c_.copy(unlockCost = f_))
    def privateSkill: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.privateSkill)((c_, f_) => c_.copy(privateSkill = f_))
    def capacityMax: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.capacityMax)((c_, f_) => c_.copy(capacityMax = f_))
    def weaponPolarityId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.weaponPolarityId)((c_, f_) => c_.copy(weaponPolarityId = f_))
    def polarityCostRandom: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Int]] = field(_.polarityCostRandom)((c_, f_) => c_.copy(polarityCostRandom = f_))
    def polarityCostCustom: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Int]] = field(_.polarityCostCustom)((c_, f_) => c_.copy(polarityCostCustom = f_))
    def advanceWeapon: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.advanceWeapon)((c_, f_) => c_.copy(advanceWeapon = f_))
    def characterId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.characterId)((c_, f_) => c_.copy(characterId = f_))
    def modNum: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.modNum)((c_, f_) => c_.copy(modNum = f_))
    def modTypeGroup: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.modTypeGroup)((c_, f_) => c_.copy(modTypeGroup = f_))
    def isHide: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.isHide)((c_, f_) => c_.copy(isHide = f_))
    def audio: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.audio)((c_, f_) => c_.copy(audio = f_))
    def weaponTag: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.weaponTag)((c_, f_) => c_.copy(weaponTag = f_))
    def attackType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.attackType)((c_, f_) => c_.copy(attackType = f_))
    def weaponSkill: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.weaponSkill)((c_, f_) => c_.copy(weaponSkill = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val NAME_FIELD_NUMBER = 2
  final val DESCRIPTION_FIELD_NUMBER = 3
  final val TYPE_FIELD_NUMBER = 4
  final val MODELSTYPE_FIELD_NUMBER = 5
  final val ELEMENT_FIELD_NUMBER = 6
  final val RESCODE_FIELD_NUMBER = 7
  final val RESPATH_FIELD_NUMBER = 8
  final val BRAND_FIELD_NUMBER = 9
  final val RANK_FIELD_NUMBER = 10
  final val ELEMENSKILL_FIELD_NUMBER = 11
  final val SKILL_FIELD_NUMBER = 12
  final val BUFFSKILL_FIELD_NUMBER = 13
  final val SLOT_FIELD_NUMBER = 14
  final val EXPRATE_FIELD_NUMBER = 15
  final val WEAPONOFFEREXP_FIELD_NUMBER = 16
  final val WEAPONNEEDCASH_FIELD_NUMBER = 17
  final val DEFAULTMAXLV_FIELD_NUMBER = 18
  final val MAXBREAK_FIELD_NUMBER = 19
  final val SOLDDROP_FIELD_NUMBER = 20
  final val SOLDGET_FIELD_NUMBER = 21
  final val PROPERTYID_FIELD_NUMBER = 22
  final val UNLOCKCOST_FIELD_NUMBER = 23
  final val PRIVATESKILL_FIELD_NUMBER = 24
  final val CAPACITYMAX_FIELD_NUMBER = 25
  final val WEAPONPOLARITYID_FIELD_NUMBER = 26
  final val POLARITYCOSTRANDOM_FIELD_NUMBER = 27
  final val POLARITYCOSTCUSTOM_FIELD_NUMBER = 28
  final val ADVANCEWEAPON_FIELD_NUMBER = 29
  final val CHARACTERID_FIELD_NUMBER = 30
  final val MODNUM_FIELD_NUMBER = 31
  final val MODTYPEGROUP_FIELD_NUMBER = 32
  final val ISHIDE_FIELD_NUMBER = 33
  final val AUDIO_FIELD_NUMBER = 34
  final val WEAPONTAG_FIELD_NUMBER = 35
  final val ATTACKTYPE_FIELD_NUMBER = 36
  final val WEAPONSKILL_FIELD_NUMBER = 37
  @transient
  private[weapons] val _typemapper_soldGet: _root_.scalapb.TypeMapper[GunWeaponData.SoldGetEntry, (_root_.scala.Int, _root_.scala.Int)] = implicitly[_root_.scalapb.TypeMapper[GunWeaponData.SoldGetEntry, (_root_.scala.Int, _root_.scala.Int)]]
  @transient
  private[weapons] val _typemapper_unlockCost: _root_.scalapb.TypeMapper[GunWeaponData.UnlockCostEntry, (_root_.scala.Int, _root_.scala.Int)] = implicitly[_root_.scalapb.TypeMapper[GunWeaponData.UnlockCostEntry, (_root_.scala.Int, _root_.scala.Int)]]
  @transient
  private[weapons] val _typemapper_polarityCostRandom: _root_.scalapb.TypeMapper[GunWeaponData.PolarityCostRandomEntry, (_root_.scala.Int, _root_.scala.Int)] = implicitly[_root_.scalapb.TypeMapper[GunWeaponData.PolarityCostRandomEntry, (_root_.scala.Int, _root_.scala.Int)]]
  @transient
  private[weapons] val _typemapper_polarityCostCustom: _root_.scalapb.TypeMapper[GunWeaponData.PolarityCostCustomEntry, (_root_.scala.Int, _root_.scala.Int)] = implicitly[_root_.scalapb.TypeMapper[GunWeaponData.PolarityCostCustomEntry, (_root_.scala.Int, _root_.scala.Int)]]
  def of(
    id: _root_.scala.Int,
    name: _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData],
    description: _root_.scala.Option[gfbot.decoder.language_string_data.LanguageStringData],
    `type`: _root_.scala.Int,
    modelstype: _root_.scala.Int,
    element: _root_.scala.Int,
    resCode: _root_.scala.Predef.String,
    resPath: _root_.scala.Predef.String,
    brand: _root_.scala.Predef.String,
    rank: _root_.scala.Int,
    elemenSkill: _root_.scala.Int,
    skill: _root_.scala.Int,
    buffSkill: _root_.scala.Int,
    slot: _root_.scala.Seq[_root_.scala.Int],
    expRate: _root_.scala.Int,
    weaponOfferExp: _root_.scala.Int,
    weaponNeedCash: _root_.scala.Int,
    defaultMaxlv: _root_.scala.Int,
    maxBreak: _root_.scala.Int,
    soldDrop: _root_.scala.Seq[_root_.scala.Int],
    soldGet: _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Int],
    propertyId: _root_.scala.Int,
    unlockCost: _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Int],
    privateSkill: _root_.scala.Int,
    capacityMax: _root_.scala.Int,
    weaponPolarityId: _root_.scala.Int,
    polarityCostRandom: _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Int],
    polarityCostCustom: _root_.scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Int],
    advanceWeapon: _root_.scala.Seq[_root_.scala.Int],
    characterId: _root_.scala.Int,
    modNum: _root_.scala.Int,
    modTypeGroup: _root_.scala.Seq[_root_.scala.Int],
    isHide: _root_.scala.Boolean,
    audio: _root_.scala.Int,
    weaponTag: _root_.scala.Int,
    attackType: _root_.scala.Int,
    weaponSkill: _root_.scala.Seq[_root_.scala.Int]
  ): GunWeaponData = GunWeaponData(
    id,
    name,
    description,
    `type`,
    modelstype,
    element,
    resCode,
    resPath,
    brand,
    rank,
    elemenSkill,
    skill,
    buffSkill,
    slot,
    expRate,
    weaponOfferExp,
    weaponNeedCash,
    defaultMaxlv,
    maxBreak,
    soldDrop,
    soldGet,
    propertyId,
    unlockCost,
    privateSkill,
    capacityMax,
    weaponPolarityId,
    polarityCostRandom,
    polarityCostCustom,
    advanceWeapon,
    characterId,
    modNum,
    modTypeGroup,
    isHide,
    audio,
    weaponTag,
    attackType,
    weaponSkill
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[GunWeaponData])
}
